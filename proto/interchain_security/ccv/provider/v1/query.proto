syntax = "proto3";
package interchain_security.ccv.provider.v1;

option go_package = "github.com/cosmos/interchain-security/v5/x/ccv/provider/types";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "interchain_security/ccv/provider/v1/provider.proto";
import "interchain_security/ccv/v1/shared_consumer.proto";
import "interchain_security/ccv/v1/wire.proto";
import "tendermint/crypto/keys.proto";
import "cosmos_proto/cosmos.proto";

service Query {
  // ConsumerGenesis queries the genesis state needed to start a consumer chain
  // whose proposal has been accepted
  rpc QueryConsumerGenesis(QueryConsumerGenesisRequest)
      returns (QueryConsumerGenesisResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/consumer_genesis/{chain_id}";
  }

  // ConsumerChains queries active consumer chains supported by the provider
  // chain
  rpc QueryConsumerChains(QueryConsumerChainsRequest)
      returns (QueryConsumerChainsResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/consumer_chains";
  }

  // QueryConsumerChainStarts queries consumer chain start proposals.
  rpc QueryConsumerChainStarts(QueryConsumerChainStartProposalsRequest)
      returns (QueryConsumerChainStartProposalsResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/consumer_chain_start_proposals";
  }

  // QueryConsumerChainStops queries consumer chain stop proposals.
  rpc QueryConsumerChainStops(QueryConsumerChainStopProposalsRequest)
      returns (QueryConsumerChainStopProposalsResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/consumer_chain_stop_proposals";
  }

  // QueryValidatorConsumerAddr queries the address
  // assigned by a validator for a consumer chain.
  rpc QueryValidatorConsumerAddr(QueryValidatorConsumerAddrRequest)
      returns (QueryValidatorConsumerAddrResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/validator_consumer_addr";
  }

  // QueryProviderAddr returns the provider chain validator
  // given a consumer chain validator address
  rpc QueryValidatorProviderAddr(QueryValidatorProviderAddrRequest)
      returns (QueryValidatorProviderAddrResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/validator_provider_addr";
  }

  // QueryThrottleState returns the main on-chain state relevant to currently
  // throttled slash packets
  rpc QueryThrottleState(QueryThrottleStateRequest)
      returns (QueryThrottleStateResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/throttle_state";
  }

  // QueryRegisteredConsumerRewardDenoms returns a list of consumer reward
  // denoms that are registered
  rpc QueryRegisteredConsumerRewardDenoms(
      QueryRegisteredConsumerRewardDenomsRequest)
      returns (QueryRegisteredConsumerRewardDenomsResponse) {
    option (google.api.http).get =
        "/interchain_security/ccv/provider/registered_consumer_reward_denoms";
  }

  // QueryProposedConsumerChainIDs returns the chain IDs of the proposed consumer chain addition proposals
  // that are still in the voting period
  rpc QueryProposedConsumerChainIDs(
      QueryProposedChainIDsRequest)
      returns (QueryProposedChainIDsResponse) {
  option (google.api.http).get =
      "/interchain_security/ccv/provider/proposed_consumer_chains";
      }

  // QueryAllPairsValConAddrByConsumerChainID returns a list of pair valconsensus address
  // between provider and consumer chain
  rpc QueryAllPairsValConAddrByConsumerChainID (
    QueryAllPairsValConAddrByConsumerChainIDRequest)
    returns (QueryAllPairsValConAddrByConsumerChainIDResponse) {
      option (google.api.http).get =
    "/interchain_security/ccv/provider/consumer_chain_id";
    }

  // QueryParams returns all current values of provider parameters
  rpc QueryParams(QueryParamsRequest)
    returns (QueryParamsResponse) {
      option (google.api.http).get =
    "/interchain_security/ccv/provider/params";
    }

  // QueryConsumerChainOptedInValidators returns a list of validators consensus addresses
  // that opted-in to the given consumer chain
  rpc QueryConsumerChainOptedInValidators(
    QueryConsumerChainOptedInValidatorsRequest)
    returns (QueryConsumerChainOptedInValidatorsResponse) {
      option (google.api.http).get =
    "/interchain_security/ccv/provider/opted_in_validators/{chain_id}";
    }

  // QueryConsumerChainsValidatorHasToValidate returns a list of consumer chains
  // that a given validator must validate
  rpc QueryConsumerChainsValidatorHasToValidate(
    QueryConsumerChainsValidatorHasToValidateRequest)
    returns (QueryConsumerChainsValidatorHasToValidateResponse) {
      option (google.api.http).get =
    "/interchain_security/ccv/provider/consumer_chains_per_validator/{provider_address}";
    }

   // QueryValidatorConsumerCommissionRate returns the commission rate a given
   // validator charges on a given consumer chain
  rpc QueryValidatorConsumerCommissionRate(
    QueryValidatorConsumerCommissionRateRequest)
    returns (QueryValidatorConsumerCommissionRateResponse) {
      option (google.api.http).get =
    "/interchain_security/ccv/provider/consumer_commission_rate/{chain_id}/{provider_address}";
    }

  // QueryConsumerValidators returns the latest set consumer-validator set for a given chainID
  // Note that this does not necessarily mean that the consumer chain is using this validator set at this exact moment
  // because a VSCPacket could be delayed to be delivered on the consumer chain.
  rpc QueryConsumerValidators(QueryConsumerValidatorsRequest)
      returns (QueryConsumerValidatorsResponse) {
        option (google.api.http).get =
            "/interchain_security/ccv/provider/consumer_validators/{chain_id}";
  }

  // QueryBlocksUntilNextEpoch returns the number of blocks until the next epoch
  // starts and validator updates are sent to the consumer chains
  rpc QueryBlocksUntilNextEpoch(QueryBlocksUntilNextEpochRequest)
      returns (QueryBlocksUntilNextEpochResponse) {
        option (google.api.http).get =
            "/interchain_security/ccv/provider/blocks_until_next_epoch";
  }
}

message QueryConsumerGenesisRequest { string chain_id = 1; }

message QueryConsumerGenesisResponse {
  interchain_security.ccv.v1.ConsumerGenesisState genesis_state = 1
      [ (gogoproto.nullable) = false ];
}

message QueryConsumerChainsRequest {}

message QueryConsumerChainsResponse { repeated Chain chains = 1; }

message QueryConsumerChainStartProposalsRequest {}

message QueryConsumerChainStartProposalsResponse {
  ConsumerAdditionProposals proposals = 1;
}

message QueryConsumerChainStopProposalsRequest {}

message QueryConsumerChainStopProposalsResponse {
  ConsumerRemovalProposals proposals = 1;
}

message Chain {
  string chain_id = 1;
  string client_id = 2;
  // If chain with `chainID` is a Top-N chain, i.e., enforces at least one validator to validate chain `chainID`
  uint32 top_N = 3;
  // If the chain is a Top-N chain, this is the minimum power required to be in the top N.
  // Otherwise, this is -1.
  int64 min_power_in_top_N = 4;
  // Corresponds to the maximum power (percentage-wise) a validator can have on the consumer chain.
  uint32 validators_power_cap = 5;
  // Corresponds to the maximum number of validators that can validate a consumer chain.
  // Only applicable to Opt In chains. Setting `validator_set_cap` on a Top N chain is a no-op.
  uint32 validator_set_cap = 6;
  // Corresponds to a list of provider consensus addresses of validators that are the ONLY ones that can validate
  // the consumer chain.
  repeated string allowlist = 7;
  // Corresponds to a list of provider consensus addresses of validators that CANNOT validate the consumer chain.
  repeated string denylist = 8;
}

message QueryValidatorConsumerAddrRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // The id of the consumer chain
  string chain_id = 1;
  // The consensus address of the validator on the provider chain
  string provider_address = 2 [ (gogoproto.moretags) = "yaml:\"address\"" ];
}

message QueryValidatorConsumerAddrResponse {
  // The address of the validator on the consumer chain
  string consumer_address = 1;
}

message QueryValidatorProviderAddrRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // The id of the provider chain
  string chain_id = 1;
  // The consensus address of the validator on the consumer chain
  string consumer_address = 2 [ (gogoproto.moretags) = "yaml:\"address\"" ];
}

message QueryValidatorProviderAddrResponse {
  // The address of the validator on the provider chain
  string provider_address = 1;
}

message QueryThrottleStateRequest {}

message QueryThrottleStateResponse {
  // current slash_meter state
  int64 slash_meter = 1;
  // allowance of voting power units (int) that the slash meter is given per
  // replenish period this also serves as the max value for the meter.
  int64 slash_meter_allowance = 2;
  // next time the slash meter could potentially be replenished, iff it's not
  // full
  google.protobuf.Timestamp next_replenish_candidate = 3
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

message QueryRegisteredConsumerRewardDenomsRequest {}

message QueryRegisteredConsumerRewardDenomsResponse {
  repeated string denoms = 1;
}

message QueryProposedChainIDsRequest {}

message QueryProposedChainIDsResponse {
  repeated ProposedChain proposedChains = 1
  [ (gogoproto.nullable) = false ];
}

message ProposedChain {
  string chainID = 1;
  uint64 proposalID = 2;
}

message QueryAllPairsValConAddrByConsumerChainIDRequest {
  // The id of the consumer chain
  string chain_id = 1;
}

message QueryAllPairsValConAddrByConsumerChainIDResponse {
  repeated PairValConAddrProviderAndConsumer pair_val_con_addr = 1;
}

message PairValConAddrProviderAndConsumer {
  // The consensus address of the validator on the provider chain
  string provider_address = 1 [ (gogoproto.moretags) = "yaml:\"provider_address\"" ];
  // The consensus address of the validator on the consumer chain
  string consumer_address = 2 [ (gogoproto.moretags) = "yaml:\"consumer_address\"" ];
  tendermint.crypto.PublicKey consumer_key = 3;
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryConsumerChainOptedInValidatorsRequest {
  string chain_id = 1;
}

message QueryConsumerChainOptedInValidatorsResponse {
  // The consensus addresses of the validators on the provider chain
  repeated string validators_provider_addresses = 1;
}

message QueryConsumerValidatorsRequest {
  string chain_id = 1;
}

message QueryConsumerValidatorsValidator {
  // The consensus address of the validator on the provider chain
  string provider_address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  // The consumer public key of the validator used on the consumer chain
  tendermint.crypto.PublicKey consumer_key = 2;
  // The power of the validator used on the consumer chain
  int64 power = 3;
}

message QueryConsumerValidatorsResponse {
  repeated QueryConsumerValidatorsValidator validators = 1;
}

message QueryConsumerChainsValidatorHasToValidateRequest {
  // The consensus address of the validator on the provider chain
  string provider_address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
}

message QueryConsumerChainsValidatorHasToValidateResponse {
  repeated string consumer_chain_ids = 1;
}

message QueryValidatorConsumerCommissionRateRequest {
  string chain_id = 1;
    // The consensus address of the validator on the provider chain
  string provider_address = 2 [ (gogoproto.moretags) = "yaml:\"address\"" ];
}

message QueryValidatorConsumerCommissionRateResponse {
  // The rate to charge delegators on the consumer chain, as a fraction
  string rate = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
    ];
}

message QueryBlocksUntilNextEpochRequest { }

message QueryBlocksUntilNextEpochResponse {
  // The number of blocks until the next epoch starts
  uint64 blocks_until_next_epoch = 1;
}
