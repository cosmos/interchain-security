syntax = "proto3";

package interchain_security.ccv.provider.v1;

option go_package = "github.com/cosmos/interchain-security/x/ccv/provider/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "ibc/core/client/v1/client.proto";
import "ibc/lightclients/tendermint/v1/tendermint.proto";

// ConsumerAdditionProposal is a governance proposal on the provider chain to spawn a new consumer chain.
// If it passes, then all validators on the provider chain are expected to validate the consumer chain at spawn time
// or get slashed. It is recommended that spawn time occurs after the proposal end time.
message ConsumerAdditionProposal {
    option (gogoproto.goproto_getters)  = false;
    option (gogoproto.goproto_stringer) = false;
  
    // the title of the proposal
    string title = 1;
    // the description of the proposal
    string description = 2;
    // the proposed chain-id of the new consumer chain, must be different from all other consumer chain ids of the executing
    // provider chain.
    string chain_id = 3 ;
    // the proposed initial height of new consumer chain.
    // For a completely new chain, this will be {0,1}. However, it may be different if this is a chain that is converting to a consumer chain.
    ibc.core.client.v1.Height initial_height = 4 [(gogoproto.nullable) = false];
    // genesis hash with no staking information included.
    bytes genesis_hash = 5 ;
    // binary hash is the hash of the binary that should be used by validators on chain initialization.
    bytes binary_hash = 6 ;
    // spawn time is the time on the provider chain at which the consumer chain genesis is finalized and all validators
    // will be responsible for starting their consumer chain validator node.
    google.protobuf.Timestamp spawn_time = 7
        [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    // Indicates whether the outstanding unbonding operations should be released
    // in case of a channel time-outs. When set to true, a governance proposal
    // on the provider chain would be necessary to release the locked funds.
    bool lock_unbonding_on_timeout = 8;   
  }
// ConsumerRemovalProposal is a governance proposal on the provider chain to remove (and stop) a consumer chain.
// If it passes, all the consumer chain's state is removed from the provider chain. The outstanding unbonding
// operation funds are released if the LockUnbondingOnTimeout parameter is set to false for the consumer chain ID.
 message ConsumerRemovalProposal {
    // the title of the proposal
    string title = 1;
    // the description of the proposal
    string description = 2;
    // the chain-id of the consumer chain to be stopped
    string chain_id = 3;
    // the time on the provider chain at which all validators are responsible to stop their consumer chain validator node
    google.protobuf.Timestamp stop_time = 4
    [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
 } 

// Params defines the parameters for CCV Provider module
message Params {
  ibc.lightclients.tendermint.v1.ClientState template_client = 1;
  // TrustingPeriodFraction is used to compute the consumer and provider IBC client's TrustingPeriod from the chain defined UnbondingPeriod
  int64 trusting_period_fraction = 2;
  // Sent IBC packets will timeout after this duration
  google.protobuf.Duration ccv_timeout_period = 3
      [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // The channel initialization (IBC channel opening handshake) will timeout after this duration
  google.protobuf.Duration init_timeout_period = 4
      [(gogoproto.nullable) = false, (gogoproto.stdduration) = true]; 
  // The VSC packets sent by the provider will timeout after this duration.
  // Note that unlike ccv_timeout_period which is an IBC param, 
  // the vsc_timeout_period is a provider-side param that enables the provider 
  // to timeout VSC packets even when a consumer chain is not live. 
  google.protobuf.Duration vsc_timeout_period = 5
      [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

message HandshakeMetadata {
  string provider_fee_pool_addr = 1;
  string version = 2;
}

// SlashAcks contains addesses of consumer chain validators
// successfully slashed on the provider chain
message SlashAcks {
  repeated string addresses = 1;
}

// ConsumerAdditionProposals holds pending governance proposals on the provider chain to spawn a new chain.
message ConsumerAdditionProposals {
  // proposals waiting for spawn_time to pass
  repeated ConsumerAdditionProposal pending = 1;
}

// ConsumerRemovalProposals holds pending governance proposals on the provider chain to remove (and stop) a consumer chain.
message ConsumerRemovalProposals {
  // proposals waiting for stop_time to pass
  repeated ConsumerRemovalProposal pending = 1;
}
