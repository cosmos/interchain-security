syntax = "proto3";
package interchain_security.ccv.consumer.v1;

import "interchain_security/ccv/v1/ccv.proto";

option go_package = "github.com/cosmos/interchain-security/x/ccv/consumer/types";

import "google/protobuf/any.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";


// Params defines the parameters for CCV consumer module
message Params {
  bool enabled = 1;

  ///////////////////////
  // Distribution Params
  // Number of blocks between ibc-token-transfers from the consumer chain to
  // the provider chain. Note that at this transmission event a fraction of
  // the accumulated tokens are divided and sent consumer redistribution
  // address.
  int64 blocks_per_distribution_transmission = 2;

  // Channel, and provider-chain receiving address to send distribution token
  // transfers over. These parameters is auto-set during the consumer <->
  // provider handshake procedure.
  string distribution_transmission_channel = 3;
  string provider_fee_pool_addr_str        = 4;
}

// LastTransmissionBlockHeight is the last time validator holding
// pools were transmitted to the provider chain
message LastTransmissionBlockHeight {
  int64 height = 1;
}

// CrossChainValidator defines the validators for CCV consumer module
message CrossChainValidator {
  bytes address = 1;
  int64 power   = 2;
  // pubkey is the consensus public key of the validator, as a Protobuf Any.
  google.protobuf.Any pubkey = 3
      [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey", (gogoproto.moretags) = "yaml:\"consensus_pubkey\""];
}

// SlashRequest defines a slashing request for CCV consumer module
message SlashRequest {
    interchain_security.ccv.v1.SlashPacketData packet = 1;
    cosmos.staking.v1beta1.InfractionType infraction = 2;
}

// SlashRequests is a list of slash requests for CCV consumer module
message SlashRequests {
  repeated SlashRequest requests = 1;
}
