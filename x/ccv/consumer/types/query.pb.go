// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/consumer/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NextFeeDistributionEstimate holds information about next fee distribution
type NextFeeDistributionEstimate struct {
	// current block height at the time of querying
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	// block height at which last distribution took place
	LastHeight int64 `protobuf:"varint,2,opt,name=lastHeight,proto3" json:"lastHeight,omitempty"`
	// block height at which next distribution will take place
	NextHeight int64 `protobuf:"varint,3,opt,name=nextHeight,proto3" json:"nextHeight,omitempty"`
	// ratio between consumer and provider fee distribution
	DistributionFraction string `protobuf:"bytes,4,opt,name=distribution_fraction,json=distributionFraction,proto3" json:"distribution_fraction,omitempty"`
	// total accruead fees at the time of querying
	Total string `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`
	// amount distibuted to provider chain
	ToProvider string `protobuf:"bytes,6,opt,name=toProvider,proto3" json:"toProvider,omitempty"`
	// amount distributed (kept) by consumer chain
	ToConsumer string `protobuf:"bytes,7,opt,name=toConsumer,proto3" json:"toConsumer,omitempty"`
}

func (m *NextFeeDistributionEstimate) Reset()         { *m = NextFeeDistributionEstimate{} }
func (m *NextFeeDistributionEstimate) String() string { return proto.CompactTextString(m) }
func (*NextFeeDistributionEstimate) ProtoMessage()    {}
func (*NextFeeDistributionEstimate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f627751d3cc10225, []int{0}
}
func (m *NextFeeDistributionEstimate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextFeeDistributionEstimate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextFeeDistributionEstimate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextFeeDistributionEstimate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextFeeDistributionEstimate.Merge(m, src)
}
func (m *NextFeeDistributionEstimate) XXX_Size() int {
	return m.Size()
}
func (m *NextFeeDistributionEstimate) XXX_DiscardUnknown() {
	xxx_messageInfo_NextFeeDistributionEstimate.DiscardUnknown(m)
}

var xxx_messageInfo_NextFeeDistributionEstimate proto.InternalMessageInfo

func (m *NextFeeDistributionEstimate) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetNextHeight() int64 {
	if m != nil {
		return m.NextHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetDistributionFraction() string {
	if m != nil {
		return m.DistributionFraction
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetToProvider() string {
	if m != nil {
		return m.ToProvider
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetToConsumer() string {
	if m != nil {
		return m.ToConsumer
	}
	return ""
}

type QueryNextFeeDistributionEstimateRequest struct {
}

func (m *QueryNextFeeDistributionEstimateRequest) Reset() {
	*m = QueryNextFeeDistributionEstimateRequest{}
}
func (m *QueryNextFeeDistributionEstimateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextFeeDistributionEstimateRequest) ProtoMessage()    {}
func (*QueryNextFeeDistributionEstimateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f627751d3cc10225, []int{1}
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.Merge(m, src)
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextFeeDistributionEstimateRequest proto.InternalMessageInfo

type QueryNextFeeDistributionEstimateResponse struct {
	Data *NextFeeDistributionEstimate `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryNextFeeDistributionEstimateResponse) Reset() {
	*m = QueryNextFeeDistributionEstimateResponse{}
}
func (m *QueryNextFeeDistributionEstimateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextFeeDistributionEstimateResponse) ProtoMessage()    {}
func (*QueryNextFeeDistributionEstimateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f627751d3cc10225, []int{2}
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.Merge(m, src)
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextFeeDistributionEstimateResponse proto.InternalMessageInfo

func (m *QueryNextFeeDistributionEstimateResponse) GetData() *NextFeeDistributionEstimate {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NextFeeDistributionEstimate)(nil), "interchain_security.ccv.consumer.v1.NextFeeDistributionEstimate")
	proto.RegisterType((*QueryNextFeeDistributionEstimateRequest)(nil), "interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateRequest")
	proto.RegisterType((*QueryNextFeeDistributionEstimateResponse)(nil), "interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateResponse")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/consumer/v1/query.proto", fileDescriptor_f627751d3cc10225)
}

var fileDescriptor_f627751d3cc10225 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xd9, 0xed, 0x8a, 0x23, 0x5e, 0x86, 0x15, 0xc2, 0x2a, 0x61, 0x89, 0x82, 0xf5,
	0xd0, 0x0c, 0xbb, 0x7b, 0x10, 0xbd, 0x28, 0xfe, 0x58, 0x3c, 0xa8, 0x68, 0xd9, 0x93, 0x97, 0x65,
	0x3a, 0x7d, 0x9b, 0x0e, 0x34, 0x33, 0xd9, 0x99, 0x97, 0xd0, 0xde, 0xa4, 0x7f, 0x80, 0x08, 0xfe,
	0x53, 0x1e, 0x0b, 0x5e, 0x3c, 0x4a, 0xeb, 0x1f, 0xe1, 0x51, 0x92, 0x34, 0x9a, 0x82, 0xb6, 0x3d,
	0xec, 0x2d, 0xf9, 0x7e, 0xde, 0xbc, 0xef, 0xcb, 0x37, 0x6f, 0x28, 0x57, 0x1a, 0xc1, 0xca, 0xa1,
	0x50, 0xfa, 0xdc, 0x81, 0xcc, 0xac, 0xc2, 0x09, 0x97, 0x32, 0xe7, 0xd2, 0x68, 0x97, 0x25, 0x60,
	0x79, 0x7e, 0xc4, 0x2f, 0x33, 0xb0, 0x93, 0x28, 0xb5, 0x06, 0x0d, 0xbb, 0xfb, 0x8f, 0x03, 0x91,
	0x94, 0x79, 0x54, 0x1f, 0x88, 0xf2, 0xa3, 0x83, 0x3b, 0xb1, 0x31, 0xf1, 0x08, 0xb8, 0x48, 0x15,
	0x17, 0x5a, 0x1b, 0x14, 0xa8, 0x8c, 0x76, 0x55, 0x8b, 0xf0, 0x93, 0x47, 0x6f, 0xbf, 0x85, 0x31,
	0x9e, 0x02, 0xbc, 0x50, 0x0e, 0xad, 0xea, 0x67, 0x05, 0x7e, 0xe9, 0x50, 0x25, 0x02, 0x81, 0xdd,
	0xa3, 0x37, 0x65, 0x66, 0x2d, 0x68, 0x7c, 0x05, 0x2a, 0x1e, 0xa2, 0x4f, 0x0e, 0x49, 0x67, 0xa7,
	0xb7, 0x2a, 0xb2, 0x80, 0xd2, 0x91, 0x70, 0x75, 0x89, 0x57, 0x96, 0x34, 0x94, 0x82, 0x6b, 0x18,
	0xd7, 0x7c, 0xa7, 0xe2, 0x7f, 0x15, 0x76, 0x42, 0x6f, 0x0d, 0x1a, 0xee, 0xe7, 0x17, 0x56, 0xc8,
	0xe2, 0xc1, 0xdf, 0x3d, 0x24, 0x9d, 0xeb, 0xbd, 0xfd, 0x26, 0x3c, 0x5d, 0x32, 0xb6, 0x4f, 0xdb,
	0x68, 0x50, 0x8c, 0xfc, 0x76, 0x59, 0x54, 0xbd, 0x14, 0x56, 0x68, 0xde, 0x59, 0x93, 0xab, 0x01,
	0x58, 0x7f, 0xaf, 0x44, 0x0d, 0xa5, 0xe2, 0xcf, 0x97, 0xf9, 0xf8, 0xd7, 0x6a, 0x5e, 0x2b, 0xe1,
	0x03, 0x7a, 0xff, 0x7d, 0x11, 0xf1, 0x9a, 0x50, 0x7a, 0x70, 0x99, 0x81, 0xc3, 0xf0, 0x23, 0xa1,
	0x9d, 0xcd, 0xb5, 0x2e, 0x35, 0xda, 0x01, 0x3b, 0xa3, 0xbb, 0x03, 0x81, 0xa2, 0xcc, 0xef, 0xc6,
	0xf1, 0xd3, 0x68, 0x8b, 0x5f, 0x17, 0xad, 0xeb, 0x5b, 0x76, 0x3b, 0x9e, 0x7a, 0xb4, 0x5d, 0x8e,
	0xc0, 0x7e, 0x11, 0xea, 0xff, 0x6f, 0x18, 0xf6, 0x7a, 0x2b, 0xbb, 0x2d, 0xbf, 0xfb, 0xe0, 0xcd,
	0x15, 0x75, 0xab, 0x92, 0x09, 0x9f, 0x4c, 0xbf, 0xfd, 0xfc, 0xe2, 0x3d, 0x62, 0x0f, 0x37, 0xef,
	0x7f, 0xb1, 0x32, 0xdd, 0x0b, 0x80, 0x6e, 0x73, 0x21, 0x9e, 0x9d, 0x7d, 0x9d, 0x07, 0x64, 0x36,
	0x0f, 0xc8, 0x8f, 0x79, 0x40, 0x3e, 0x2f, 0x82, 0xd6, 0x6c, 0x11, 0xb4, 0xbe, 0x2f, 0x82, 0xd6,
	0x87, 0xc7, 0xb1, 0xc2, 0x61, 0xd6, 0x8f, 0xa4, 0x49, 0xb8, 0x34, 0x2e, 0x31, 0xae, 0xe1, 0xd1,
	0xfd, 0xe3, 0x31, 0x5e, 0x75, 0xc1, 0x49, 0x0a, 0xae, 0xbf, 0x57, 0x5e, 0x90, 0x93, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x1e, 0x6c, 0xbe, 0x84, 0x96, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	QueryNextFeeDistribution(ctx context.Context, in *QueryNextFeeDistributionEstimateRequest, opts ...grpc.CallOption) (*QueryNextFeeDistributionEstimateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryNextFeeDistribution(ctx context.Context, in *QueryNextFeeDistributionEstimateRequest, opts ...grpc.CallOption) (*QueryNextFeeDistributionEstimateResponse, error) {
	out := new(QueryNextFeeDistributionEstimateResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.consumer.v1.Query/QueryNextFeeDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	QueryNextFeeDistribution(context.Context, *QueryNextFeeDistributionEstimateRequest) (*QueryNextFeeDistributionEstimateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryNextFeeDistribution(ctx context.Context, req *QueryNextFeeDistributionEstimateRequest) (*QueryNextFeeDistributionEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNextFeeDistribution not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryNextFeeDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextFeeDistributionEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNextFeeDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.consumer.v1.Query/QueryNextFeeDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNextFeeDistribution(ctx, req.(*QueryNextFeeDistributionEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interchain_security.ccv.consumer.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNextFeeDistribution",
			Handler:    _Query_QueryNextFeeDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchain_security/ccv/consumer/v1/query.proto",
}

func (m *NextFeeDistributionEstimate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextFeeDistributionEstimate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextFeeDistributionEstimate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToConsumer) > 0 {
		i -= len(m.ToConsumer)
		copy(dAtA[i:], m.ToConsumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToConsumer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToProvider) > 0 {
		i -= len(m.ToProvider)
		copy(dAtA[i:], m.ToProvider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToProvider)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DistributionFraction) > 0 {
		i -= len(m.DistributionFraction)
		copy(dAtA[i:], m.DistributionFraction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DistributionFraction)))
		i--
		dAtA[i] = 0x22
	}
	if m.NextHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.LastHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextFeeDistributionEstimateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextFeeDistributionEstimateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextFeeDistributionEstimateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextFeeDistributionEstimateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextFeeDistributionEstimateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextFeeDistributionEstimateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NextFeeDistributionEstimate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if m.LastHeight != 0 {
		n += 1 + sovQuery(uint64(m.LastHeight))
	}
	if m.NextHeight != 0 {
		n += 1 + sovQuery(uint64(m.NextHeight))
	}
	l = len(m.DistributionFraction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ToProvider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ToConsumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextFeeDistributionEstimateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextFeeDistributionEstimateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextFeeDistributionEstimate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextFeeDistributionEstimate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextFeeDistributionEstimate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeight", wireType)
			}
			m.LastHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHeight", wireType)
			}
			m.NextHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToConsumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextFeeDistributionEstimateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextFeeDistributionEstimateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NextFeeDistributionEstimate{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
