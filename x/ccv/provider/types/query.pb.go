// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/interchain-security/x/ccv/consumer/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryConsumerGenesisRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryConsumerGenesisRequest) Reset()         { *m = QueryConsumerGenesisRequest{} }
func (m *QueryConsumerGenesisRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerGenesisRequest) ProtoMessage()    {}
func (*QueryConsumerGenesisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{0}
}
func (m *QueryConsumerGenesisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerGenesisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerGenesisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerGenesisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerGenesisRequest.Merge(m, src)
}
func (m *QueryConsumerGenesisRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerGenesisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerGenesisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerGenesisRequest proto.InternalMessageInfo

func (m *QueryConsumerGenesisRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryConsumerGenesisResponse struct {
	GenesisState types.GenesisState `protobuf:"bytes,1,opt,name=genesis_state,json=genesisState,proto3" json:"genesis_state"`
}

func (m *QueryConsumerGenesisResponse) Reset()         { *m = QueryConsumerGenesisResponse{} }
func (m *QueryConsumerGenesisResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerGenesisResponse) ProtoMessage()    {}
func (*QueryConsumerGenesisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{1}
}
func (m *QueryConsumerGenesisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerGenesisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerGenesisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerGenesisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerGenesisResponse.Merge(m, src)
}
func (m *QueryConsumerGenesisResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerGenesisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerGenesisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerGenesisResponse proto.InternalMessageInfo

func (m *QueryConsumerGenesisResponse) GetGenesisState() types.GenesisState {
	if m != nil {
		return m.GenesisState
	}
	return types.GenesisState{}
}

type QueryConsumerChainsRequest struct {
}

func (m *QueryConsumerChainsRequest) Reset()         { *m = QueryConsumerChainsRequest{} }
func (m *QueryConsumerChainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainsRequest) ProtoMessage()    {}
func (*QueryConsumerChainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{2}
}
func (m *QueryConsumerChainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainsRequest.Merge(m, src)
}
func (m *QueryConsumerChainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainsRequest proto.InternalMessageInfo

type QueryConsumerChainsResponse struct {
	ChainIds []string `protobuf:"bytes,1,rep,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
}

func (m *QueryConsumerChainsResponse) Reset()         { *m = QueryConsumerChainsResponse{} }
func (m *QueryConsumerChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainsResponse) ProtoMessage()    {}
func (*QueryConsumerChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{3}
}
func (m *QueryConsumerChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainsResponse.Merge(m, src)
}
func (m *QueryConsumerChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainsResponse proto.InternalMessageInfo

func (m *QueryConsumerChainsResponse) GetChainIds() []string {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

type QueryConsumerChainStartProposalsRequest struct {
}

func (m *QueryConsumerChainStartProposalsRequest) Reset() {
	*m = QueryConsumerChainStartProposalsRequest{}
}
func (m *QueryConsumerChainStartProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainStartProposalsRequest) ProtoMessage()    {}
func (*QueryConsumerChainStartProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{4}
}
func (m *QueryConsumerChainStartProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainStartProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainStartProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainStartProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainStartProposalsRequest.Merge(m, src)
}
func (m *QueryConsumerChainStartProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainStartProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainStartProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainStartProposalsRequest proto.InternalMessageInfo

type QueryConsumerChainStartProposalsResponse struct {
	Proposals *ConsumerAdditionProposals `protobuf:"bytes,1,opt,name=proposals,proto3" json:"proposals,omitempty"`
}

func (m *QueryConsumerChainStartProposalsResponse) Reset() {
	*m = QueryConsumerChainStartProposalsResponse{}
}
func (m *QueryConsumerChainStartProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainStartProposalsResponse) ProtoMessage()    {}
func (*QueryConsumerChainStartProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{5}
}
func (m *QueryConsumerChainStartProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainStartProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainStartProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainStartProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainStartProposalsResponse.Merge(m, src)
}
func (m *QueryConsumerChainStartProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainStartProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainStartProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainStartProposalsResponse proto.InternalMessageInfo

func (m *QueryConsumerChainStartProposalsResponse) GetProposals() *ConsumerAdditionProposals {
	if m != nil {
		return m.Proposals
	}
	return nil
}

type QueryConsumerChainStopProposalsRequest struct {
}

func (m *QueryConsumerChainStopProposalsRequest) Reset() {
	*m = QueryConsumerChainStopProposalsRequest{}
}
func (m *QueryConsumerChainStopProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainStopProposalsRequest) ProtoMessage()    {}
func (*QueryConsumerChainStopProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{6}
}
func (m *QueryConsumerChainStopProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainStopProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainStopProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainStopProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainStopProposalsRequest.Merge(m, src)
}
func (m *QueryConsumerChainStopProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainStopProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainStopProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainStopProposalsRequest proto.InternalMessageInfo

type QueryConsumerChainStopProposalsResponse struct {
	Proposals *ConsumerRemovalProposals `protobuf:"bytes,1,opt,name=proposals,proto3" json:"proposals,omitempty"`
}

func (m *QueryConsumerChainStopProposalsResponse) Reset() {
	*m = QueryConsumerChainStopProposalsResponse{}
}
func (m *QueryConsumerChainStopProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerChainStopProposalsResponse) ProtoMessage()    {}
func (*QueryConsumerChainStopProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_422512d7b7586cd7, []int{7}
}
func (m *QueryConsumerChainStopProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerChainStopProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerChainStopProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerChainStopProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerChainStopProposalsResponse.Merge(m, src)
}
func (m *QueryConsumerChainStopProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerChainStopProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerChainStopProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerChainStopProposalsResponse proto.InternalMessageInfo

func (m *QueryConsumerChainStopProposalsResponse) GetProposals() *ConsumerRemovalProposals {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryConsumerGenesisRequest)(nil), "interchain_security.ccv.provider.v1.QueryConsumerGenesisRequest")
	proto.RegisterType((*QueryConsumerGenesisResponse)(nil), "interchain_security.ccv.provider.v1.QueryConsumerGenesisResponse")
	proto.RegisterType((*QueryConsumerChainsRequest)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainsRequest")
	proto.RegisterType((*QueryConsumerChainsResponse)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainsResponse")
	proto.RegisterType((*QueryConsumerChainStartProposalsRequest)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainStartProposalsRequest")
	proto.RegisterType((*QueryConsumerChainStartProposalsResponse)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainStartProposalsResponse")
	proto.RegisterType((*QueryConsumerChainStopProposalsRequest)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainStopProposalsRequest")
	proto.RegisterType((*QueryConsumerChainStopProposalsResponse)(nil), "interchain_security.ccv.provider.v1.QueryConsumerChainStopProposalsResponse")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/query.proto", fileDescriptor_422512d7b7586cd7)
}

var fileDescriptor_422512d7b7586cd7 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0x33, 0xf5, 0xa5, 0xcd, 0xf8, 0x06, 0x83, 0x60, 0xdc, 0x86, 0xb5, 0xac, 0xa0, 0xf1,
	0xe0, 0x2e, 0x9b, 0x5e, 0xb4, 0x50, 0xf3, 0x52, 0xa4, 0x8a, 0x15, 0x34, 0xf5, 0xa4, 0x42, 0xd8,
	0x4e, 0x86, 0xed, 0x40, 0xb2, 0xb3, 0xdd, 0x99, 0x2c, 0x06, 0xf5, 0xa0, 0x07, 0xf1, 0x28, 0xf8,
	0x75, 0xfc, 0x00, 0x3d, 0x49, 0xc1, 0x8b, 0x17, 0x45, 0x12, 0xbf, 0x86, 0x20, 0xbb, 0x3b, 0x93,
	0x74, 0x9b, 0x8d, 0x4d, 0x62, 0x6f, 0x93, 0xc9, 0x3c, 0xff, 0xe7, 0xf7, 0x7f, 0xf8, 0xcf, 0x2c,
	0xb4, 0xa8, 0x27, 0x48, 0x80, 0x77, 0x1d, 0xea, 0x35, 0x39, 0xc1, 0xdd, 0x80, 0x8a, 0x9e, 0x85,
	0x71, 0x68, 0xf9, 0x01, 0x0b, 0x69, 0x8b, 0x04, 0x56, 0x68, 0x5b, 0x7b, 0x5d, 0x12, 0xf4, 0x4c,
	0x3f, 0x60, 0x82, 0xa1, 0xeb, 0x19, 0x05, 0x26, 0xc6, 0xa1, 0xa9, 0x0a, 0xcc, 0xd0, 0xd6, 0x8a,
	0x2e, 0x63, 0x6e, 0x9b, 0x58, 0x8e, 0x4f, 0x2d, 0xc7, 0xf3, 0x98, 0x70, 0x04, 0x65, 0x1e, 0x4f,
	0x24, 0xb4, 0xcb, 0x2e, 0x73, 0x59, 0xbc, 0xb4, 0xa2, 0x95, 0xdc, 0xb5, 0x27, 0x91, 0x60, 0xe6,
	0xf1, 0x6e, 0x27, 0x21, 0x71, 0x89, 0x47, 0x38, 0x55, 0x42, 0xe5, 0x69, 0xe0, 0x87, 0x5c, 0x71,
	0x8d, 0x71, 0x07, 0x2e, 0x3f, 0x8d, 0xec, 0x6c, 0x48, 0xd5, 0xcd, 0x44, 0xb1, 0x41, 0xf6, 0xba,
	0x84, 0x0b, 0x74, 0x15, 0x2e, 0x25, 0x7a, 0xb4, 0x55, 0x00, 0x2b, 0xa0, 0x94, 0x6f, 0x2c, 0xc6,
	0xbf, 0x1f, 0xb6, 0x8c, 0x37, 0xb0, 0x98, 0x5d, 0xc9, 0x7d, 0xe6, 0x71, 0x82, 0x5e, 0xc2, 0x0b,
	0x12, 0xaf, 0xc9, 0x85, 0x23, 0x48, 0x5c, 0x7f, 0xae, 0x6c, 0x9b, 0x93, 0x26, 0xa6, 0x8c, 0x99,
	0xa1, 0x6d, 0x4a, 0xb1, 0xed, 0xa8, 0xb0, 0x7e, 0x7a, 0xff, 0xe7, 0xb5, 0x5c, 0xe3, 0xbc, 0x7b,
	0x68, 0xcf, 0x28, 0x42, 0x2d, 0xd5, 0x7d, 0x23, 0xd2, 0x53, 0xd8, 0xc6, 0xda, 0x11, 0x57, 0xea,
	0x5f, 0x89, 0xb6, 0x0c, 0xf3, 0xca, 0x15, 0x2f, 0x80, 0x95, 0x53, 0xa5, 0x7c, 0x63, 0x49, 0xda,
	0xe2, 0xc6, 0x2d, 0x78, 0x73, 0xbc, 0x76, 0x5b, 0x38, 0x81, 0x78, 0x12, 0x30, 0x9f, 0x71, 0xa7,
	0x3d, 0x6c, 0xf3, 0x11, 0xc0, 0xd2, 0xf1, 0x67, 0x87, 0xf3, 0xc8, 0xfb, 0x6a, 0x53, 0xce, 0xe2,
	0x9e, 0x39, 0x45, 0x7a, 0x4c, 0x25, 0x5e, 0x6b, 0xb5, 0x68, 0x94, 0x9b, 0x91, 0xf4, 0x48, 0xd0,
	0x28, 0xc1, 0x1b, 0x59, 0x24, 0xcc, 0x1f, 0x83, 0xfe, 0x00, 0xb2, 0x0d, 0xa6, 0x8e, 0x4a, 0xe6,
	0x17, 0xe3, 0xcc, 0xeb, 0x33, 0x31, 0x37, 0x48, 0x87, 0x85, 0x4e, 0x3b, 0x0b, 0xb9, 0xfc, 0x65,
	0x11, 0x9e, 0x89, 0x41, 0xd0, 0x0f, 0x00, 0x2f, 0x1d, 0x89, 0x11, 0xaa, 0x4e, 0xd5, 0xe7, 0x1f,
	0xd9, 0xd5, 0x6a, 0xff, 0xa1, 0x90, 0xf8, 0x37, 0xee, 0xbf, 0xff, 0xf6, 0xfb, 0xf3, 0x42, 0x05,
	0xad, 0x1f, 0xff, 0x2e, 0xa8, 0xf4, 0x36, 0x65, 0x4c, 0xad, 0xd7, 0x2a, 0x62, 0x6f, 0xd1, 0x57,
	0x00, 0x2f, 0xa6, 0xa3, 0x88, 0x2a, 0xb3, 0xc3, 0xa5, 0x22, 0xae, 0x55, 0xe7, 0x17, 0x90, 0xe6,
	0xee, 0xc6, 0xe6, 0x56, 0x91, 0x3d, 0x83, 0x39, 0x9c, 0xd0, 0xbf, 0x5b, 0x80, 0x85, 0x09, 0xc1,
	0xe7, 0x68, 0x6b, 0x4e, 0xb2, 0xcc, 0x3b, 0xa6, 0x3d, 0x3e, 0x21, 0x35, 0x69, 0xfa, 0x41, 0x6c,
	0xba, 0x8e, 0xaa, 0xb3, 0x9a, 0x8e, 0x1e, 0xb1, 0x40, 0x34, 0x87, 0xf1, 0x45, 0x7f, 0x00, 0xbc,
	0x92, 0x7d, 0x8f, 0x38, 0x7a, 0x34, 0x37, 0xf4, 0xf8, 0x85, 0xd5, 0xb6, 0x4e, 0x46, 0x4c, 0x0e,
	0x60, 0x33, 0x1e, 0x40, 0x0d, 0x55, 0xe6, 0x18, 0x00, 0xf3, 0x47, 0xfe, 0xeb, 0xcf, 0xf6, 0xfb,
	0x3a, 0x38, 0xe8, 0xeb, 0xe0, 0x57, 0x5f, 0x07, 0x9f, 0x06, 0x7a, 0xee, 0x60, 0xa0, 0xe7, 0xbe,
	0x0f, 0xf4, 0xdc, 0xf3, 0x35, 0x97, 0x8a, 0xdd, 0xee, 0x8e, 0x89, 0x59, 0xc7, 0xc2, 0x8c, 0x77,
	0x18, 0x3f, 0xd4, 0xeb, 0xf6, 0xb0, 0xd7, 0xab, 0x74, 0x37, 0xd1, 0xf3, 0x09, 0xdf, 0x39, 0x1b,
	0x7f, 0x96, 0x56, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x60, 0xe8, 0xfe, 0x89, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	ConsumerGenesis(ctx context.Context, in *QueryConsumerGenesisRequest, opts ...grpc.CallOption) (*QueryConsumerGenesisResponse, error)
	// ConsumerChains queries active consumer chains supported by the provider
	// chain
	ConsumerChains(ctx context.Context, in *QueryConsumerChainsRequest, opts ...grpc.CallOption) (*QueryConsumerChainsResponse, error)
	// QueryConsumerChainStarts queries consumer chain start proposals.
	QueryConsumerChainStarts(ctx context.Context, in *QueryConsumerChainStartProposalsRequest, opts ...grpc.CallOption) (*QueryConsumerChainStartProposalsResponse, error)
	// QueryConsumerChainStops queries consumer chain stop proposals.
	QueryConsumerChainStops(ctx context.Context, in *QueryConsumerChainStopProposalsRequest, opts ...grpc.CallOption) (*QueryConsumerChainStopProposalsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ConsumerGenesis(ctx context.Context, in *QueryConsumerGenesisRequest, opts ...grpc.CallOption) (*QueryConsumerGenesisResponse, error) {
	out := new(QueryConsumerGenesisResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.provider.v1.Query/ConsumerGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumerChains(ctx context.Context, in *QueryConsumerChainsRequest, opts ...grpc.CallOption) (*QueryConsumerChainsResponse, error) {
	out := new(QueryConsumerChainsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.provider.v1.Query/ConsumerChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryConsumerChainStarts(ctx context.Context, in *QueryConsumerChainStartProposalsRequest, opts ...grpc.CallOption) (*QueryConsumerChainStartProposalsResponse, error) {
	out := new(QueryConsumerChainStartProposalsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.provider.v1.Query/QueryConsumerChainStarts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryConsumerChainStops(ctx context.Context, in *QueryConsumerChainStopProposalsRequest, opts ...grpc.CallOption) (*QueryConsumerChainStopProposalsResponse, error) {
	out := new(QueryConsumerChainStopProposalsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.provider.v1.Query/QueryConsumerChainStops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	ConsumerGenesis(context.Context, *QueryConsumerGenesisRequest) (*QueryConsumerGenesisResponse, error)
	// ConsumerChains queries active consumer chains supported by the provider
	// chain
	ConsumerChains(context.Context, *QueryConsumerChainsRequest) (*QueryConsumerChainsResponse, error)
	// QueryConsumerChainStarts queries consumer chain start proposals.
	QueryConsumerChainStarts(context.Context, *QueryConsumerChainStartProposalsRequest) (*QueryConsumerChainStartProposalsResponse, error)
	// QueryConsumerChainStops queries consumer chain stop proposals.
	QueryConsumerChainStops(context.Context, *QueryConsumerChainStopProposalsRequest) (*QueryConsumerChainStopProposalsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ConsumerGenesis(ctx context.Context, req *QueryConsumerGenesisRequest) (*QueryConsumerGenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerGenesis not implemented")
}
func (*UnimplementedQueryServer) ConsumerChains(ctx context.Context, req *QueryConsumerChainsRequest) (*QueryConsumerChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerChains not implemented")
}
func (*UnimplementedQueryServer) QueryConsumerChainStarts(ctx context.Context, req *QueryConsumerChainStartProposalsRequest) (*QueryConsumerChainStartProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsumerChainStarts not implemented")
}
func (*UnimplementedQueryServer) QueryConsumerChainStops(ctx context.Context, req *QueryConsumerChainStopProposalsRequest) (*QueryConsumerChainStopProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsumerChainStops not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ConsumerGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumerGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.provider.v1.Query/ConsumerGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumerGenesis(ctx, req.(*QueryConsumerGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumerChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumerChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.provider.v1.Query/ConsumerChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumerChains(ctx, req.(*QueryConsumerChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryConsumerChainStarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerChainStartProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryConsumerChainStarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.provider.v1.Query/QueryConsumerChainStarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryConsumerChainStarts(ctx, req.(*QueryConsumerChainStartProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryConsumerChainStops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerChainStopProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryConsumerChainStops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.provider.v1.Query/QueryConsumerChainStops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryConsumerChainStops(ctx, req.(*QueryConsumerChainStopProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interchain_security.ccv.provider.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumerGenesis",
			Handler:    _Query_ConsumerGenesis_Handler,
		},
		{
			MethodName: "ConsumerChains",
			Handler:    _Query_ConsumerChains_Handler,
		},
		{
			MethodName: "QueryConsumerChainStarts",
			Handler:    _Query_QueryConsumerChainStarts_Handler,
		},
		{
			MethodName: "QueryConsumerChainStops",
			Handler:    _Query_QueryConsumerChainStops_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchain_security/ccv/provider/v1/query.proto",
}

func (m *QueryConsumerGenesisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerGenesisRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerGenesisRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumerGenesisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerGenesisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerGenesisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GenesisState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		for iNdEx := len(m.ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainIds[iNdEx])
			copy(dAtA[i:], m.ChainIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainStartProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainStartProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainStartProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainStartProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainStartProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainStartProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposals != nil {
		{
			size, err := m.Proposals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainStopProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainStopProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainStopProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConsumerChainStopProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerChainStopProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerChainStopProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposals != nil {
		{
			size, err := m.Proposals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryConsumerGenesisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumerGenesisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GenesisState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConsumerChainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConsumerChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		for _, s := range m.ChainIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryConsumerChainStartProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConsumerChainStartProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposals != nil {
		l = m.Proposals.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumerChainStopProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConsumerChainStopProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposals != nil {
		l = m.Proposals.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryConsumerGenesisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerGenesisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerGenesisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerGenesisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerGenesisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerGenesisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIds = append(m.ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainStartProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainStartProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainStartProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainStartProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainStartProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainStartProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposals == nil {
				m.Proposals = &ConsumerAdditionProposals{}
			}
			if err := m.Proposals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainStopProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainStopProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainStopProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerChainStopProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerChainStopProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerChainStopProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposals == nil {
				m.Proposals = &ConsumerRemovalProposals{}
			}
			if err := m.Proposals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
