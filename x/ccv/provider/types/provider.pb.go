// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/provider.proto

package types

import (
	types1 "cosmossdk.io/x/evidence/types"
	fmt "fmt"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	_07_tendermint "github.com/cosmos/ibc-go/v8/modules/light-clients/07-tendermint"
	types3 "github.com/cosmos/interchain-security/v6/x/ccv/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConsumerPhase indicates the phases of a consumer chain according to ADR 019
type ConsumerPhase int32

const (
	// UNSPECIFIED defines an empty phase.
	CONSUMER_PHASE_UNSPECIFIED ConsumerPhase = 0
	// REGISTERED defines the phase in which a consumer chain has been assigned a unique consumer id.
	// A chain in this phase cannot yet launch.
	CONSUMER_PHASE_REGISTERED ConsumerPhase = 1
	// INITIALIZED defines the phase in which a consumer chain has set all the needed parameters to launch but
	// has not yet launched (e.g., because the `spawnTime` of the consumer chain has not yet been reached).
	CONSUMER_PHASE_INITIALIZED ConsumerPhase = 2
	// LAUNCHED defines the phase in which a consumer chain is running and consuming a subset of the validator
	// set of the provider.
	CONSUMER_PHASE_LAUNCHED ConsumerPhase = 3
	// STOPPED defines the phase in which a previously-launched chain has stopped.
	CONSUMER_PHASE_STOPPED ConsumerPhase = 4
	// DELETED defines the phase in which the state of a stopped chain has been deleted.
	CONSUMER_PHASE_DELETED ConsumerPhase = 5
)

var ConsumerPhase_name = map[int32]string{
	0: "CONSUMER_PHASE_UNSPECIFIED",
	1: "CONSUMER_PHASE_REGISTERED",
	2: "CONSUMER_PHASE_INITIALIZED",
	3: "CONSUMER_PHASE_LAUNCHED",
	4: "CONSUMER_PHASE_STOPPED",
	5: "CONSUMER_PHASE_DELETED",
}

var ConsumerPhase_value = map[string]int32{
	"CONSUMER_PHASE_UNSPECIFIED": 0,
	"CONSUMER_PHASE_REGISTERED":  1,
	"CONSUMER_PHASE_INITIALIZED": 2,
	"CONSUMER_PHASE_LAUNCHED":    3,
	"CONSUMER_PHASE_STOPPED":     4,
	"CONSUMER_PHASE_DELETED":     5,
}

func (x ConsumerPhase) String() string {
	return proto.EnumName(ConsumerPhase_name, int32(x))
}

func (ConsumerPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{0}
}

// WARNING: This message is deprecated in favor of `MsgCreateConsumer`.
// ConsumerAdditionProposal is a governance proposal on the provider chain to
// spawn a new consumer chain. If it passes, then all validators on the provider
// chain are expected to validate the consumer chain at spawn time or get
// slashed. It is recommended that spawn time occurs after the proposal end
// time.
// Use MsgConsumerAddition to submit this proposal type.
//
// Deprecated: Do not use.
type ConsumerAdditionProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the proposed chain-id of the new consumer chain, must be different from all
	// other consumer chain ids of the executing provider chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the proposed initial height of new consumer chain.
	// For a completely new chain, this will be {0,1}. However, it may be
	// different if this is a chain that is converting to a consumer chain.
	InitialHeight types.Height `protobuf:"bytes,4,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height"`
	// The hash of the consumer chain genesis state without the consumer CCV
	// module genesis params. It is used for off-chain confirmation of
	// genesis.json validity by validators and other parties.
	GenesisHash []byte `protobuf:"bytes,5,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	// The hash of the consumer chain binary that should be run by validators on
	// chain initialization. It is used for off-chain confirmation of binary
	// validity by validators and other parties.
	BinaryHash []byte `protobuf:"bytes,6,opt,name=binary_hash,json=binaryHash,proto3" json:"binary_hash,omitempty"`
	// spawn time is the time on the provider chain at which the consumer chain
	// genesis is finalized and all validators will be responsible for starting
	// their consumer chain validator node.
	SpawnTime time.Time `protobuf:"bytes,7,opt,name=spawn_time,json=spawnTime,proto3,stdtime" json:"spawn_time"`
	// Unbonding period for the consumer,
	// which should be smaller than that of the provider in general.
	UnbondingPeriod time.Duration `protobuf:"bytes,8,opt,name=unbonding_period,json=unbondingPeriod,proto3,stdduration" json:"unbonding_period"`
	// Sent CCV related IBC packets will timeout after this duration
	CcvTimeoutPeriod time.Duration `protobuf:"bytes,9,opt,name=ccv_timeout_period,json=ccvTimeoutPeriod,proto3,stdduration" json:"ccv_timeout_period"`
	// Sent transfer related IBC packets will timeout after this duration
	TransferTimeoutPeriod time.Duration `protobuf:"bytes,10,opt,name=transfer_timeout_period,json=transferTimeoutPeriod,proto3,stdduration" json:"transfer_timeout_period"`
	// The fraction of tokens allocated to the consumer redistribution address
	// during distribution events. The fraction is a string representing a
	// decimal number. For example "0.75" would represent 75%.
	ConsumerRedistributionFraction string `protobuf:"bytes,11,opt,name=consumer_redistribution_fraction,json=consumerRedistributionFraction,proto3" json:"consumer_redistribution_fraction,omitempty"`
	// BlocksPerDistributionTransmission is the number of blocks between
	// ibc-token-transfers from the consumer chain to the provider chain. On
	// sending transmission event, `consumer_redistribution_fraction` of the
	// accumulated tokens are sent to the consumer redistribution address.
	BlocksPerDistributionTransmission int64 `protobuf:"varint,12,opt,name=blocks_per_distribution_transmission,json=blocksPerDistributionTransmission,proto3" json:"blocks_per_distribution_transmission,omitempty"`
	// The number of historical info entries to persist in store.
	// This param is a part of the cosmos sdk staking module. In the case of
	// a ccv enabled consumer chain, the ccv module acts as the staking module.
	HistoricalEntries int64 `protobuf:"varint,13,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// The ID of a token transfer channel used for the Reward Distribution
	// sub-protocol. If DistributionTransmissionChannel == "", a new transfer
	// channel is created on top of the same connection as the CCV channel.
	// Note that transfer_channel_id is the ID of the channel end on the consumer
	// chain. it is most relevant for chains performing a sovereign to consumer
	// changeover in order to maintain the existing ibc transfer channel
	DistributionTransmissionChannel string `protobuf:"bytes,14,opt,name=distribution_transmission_channel,json=distributionTransmissionChannel,proto3" json:"distribution_transmission_channel,omitempty"`
	// Corresponds to the percentage of validators that have to validate the chain under the Top N case.
	// For example, 53 corresponds to a Top 53% chain, meaning that the top 53% provider validators by voting power
	// have to validate the proposed consumer chain. top_N can either be 0 or any value in [50, 100].
	// A chain can join with top_N == 0 as an Opt In chain, or with top_N âˆˆ [50, 100] as a Top N chain.
	Top_N uint32 `protobuf:"varint,15,opt,name=top_N,json=topN,proto3" json:"top_N,omitempty"`
	// Corresponds to the maximum power (percentage-wise) a validator can have on the consumer chain. For instance, if
	// `validators_power_cap` is set to 32, it means that no validator can have more than 32% of the voting power on the
	// consumer chain. Note that this might not be feasible. For example, think of a consumer chain with only
	// 5 validators and with `validators_power_cap` set to 10%. In such a scenario, at least one validator would need
	// to have more than 20% of the total voting power. Therefore, `validators_power_cap` operates on a best-effort basis.
	ValidatorsPowerCap uint32 `protobuf:"varint,16,opt,name=validators_power_cap,json=validatorsPowerCap,proto3" json:"validators_power_cap,omitempty"`
	// Corresponds to the maximum number of validators that can validate a consumer chain.
	// Only applicable to Opt In chains. Setting `validator_set_cap` on a Top N chain is a no-op.
	ValidatorSetCap uint32 `protobuf:"varint,17,opt,name=validator_set_cap,json=validatorSetCap,proto3" json:"validator_set_cap,omitempty"`
	// Corresponds to a list of provider consensus addresses of validators that are the ONLY ones that can validate
	// the consumer chain.
	Allowlist []string `protobuf:"bytes,18,rep,name=allowlist,proto3" json:"allowlist,omitempty"`
	// Corresponds to a list of provider consensus addresses of validators that CANNOT validate the consumer chain.
	Denylist []string `protobuf:"bytes,19,rep,name=denylist,proto3" json:"denylist,omitempty"`
	// Corresponds to the minimal amount of (provider chain) stake required to validate on the consumer chain.
	MinStake uint64 `protobuf:"varint,20,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// Corresponds to whether inactive validators are allowed to validate the consumer chain.
	AllowInactiveVals bool `protobuf:"varint,21,opt,name=allow_inactive_vals,json=allowInactiveVals,proto3" json:"allow_inactive_vals,omitempty"`
}

func (m *ConsumerAdditionProposal) Reset()      { *m = ConsumerAdditionProposal{} }
func (*ConsumerAdditionProposal) ProtoMessage() {}
func (*ConsumerAdditionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{0}
}
func (m *ConsumerAdditionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAdditionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAdditionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAdditionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAdditionProposal.Merge(m, src)
}
func (m *ConsumerAdditionProposal) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAdditionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAdditionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAdditionProposal proto.InternalMessageInfo

// WARNING: This message is deprecated in favor of `MsgRemoveConsumer`.
// ConsumerRemovalProposal is a governance proposal on the provider chain to
// remove (and stop) a consumer chain. If it passes, all the consumer chain's
// state is removed from the provider chain. The outstanding unbonding operation
// funds are released.
// Use MsgConsumerRemoval to submit this proposal type.
//
// Deprecated: Do not use.
type ConsumerRemovalProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the chain-id of the consumer chain to be stopped
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the time on the provider chain at which all validators are responsible to
	// stop their consumer chain validator node
	StopTime time.Time `protobuf:"bytes,4,opt,name=stop_time,json=stopTime,proto3,stdtime" json:"stop_time"`
}

func (m *ConsumerRemovalProposal) Reset()         { *m = ConsumerRemovalProposal{} }
func (m *ConsumerRemovalProposal) String() string { return proto.CompactTextString(m) }
func (*ConsumerRemovalProposal) ProtoMessage()    {}
func (*ConsumerRemovalProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{1}
}
func (m *ConsumerRemovalProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRemovalProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRemovalProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerRemovalProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRemovalProposal.Merge(m, src)
}
func (m *ConsumerRemovalProposal) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRemovalProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRemovalProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRemovalProposal proto.InternalMessageInfo

func (m *ConsumerRemovalProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ConsumerRemovalProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ConsumerRemovalProposal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerRemovalProposal) GetStopTime() time.Time {
	if m != nil {
		return m.StopTime
	}
	return time.Time{}
}

// WARNING: This message is deprecated in favor of `MsgUpdateConsumer`.
// ConsumerModificationProposal is a governance proposal on the provider chain to modify parameters of a running
// consumer chain. If it passes, the consumer chain's state is updated to take into account the newest params.
//
// Deprecated: Do not use.
type ConsumerModificationProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the chain-id of the consumer chain to be modified
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Corresponds to the percentage of validators that have to validate the chain under the Top N case.
	// For example, 53 corresponds to a Top 53% chain, meaning that the top 53% provider validators by voting power
	// have to validate the proposed consumer chain. top_N can either be 0 or any value in [50, 100].
	// A chain can join with top_N == 0 as an Opt In chain, or with top_N âˆˆ [50, 100] as a Top N chain.
	Top_N uint32 `protobuf:"varint,4,opt,name=top_N,json=topN,proto3" json:"top_N,omitempty"`
	// Corresponds to the maximum power (percentage-wise) a validator can have on the consumer chain. For instance, if
	// `validators_power_cap` is set to 32, it means that no validator can have more than 32% of the voting power on the
	// consumer chain. Note that this might not be feasible. For example, think of a consumer chain with only
	// 5 validators and with `validators_power_cap` set to 10%. In such a scenario, at least one validator would need
	// to have more than 20% of the total voting power. Therefore, `validators_power_cap` operates on a best-effort basis.
	ValidatorsPowerCap uint32 `protobuf:"varint,5,opt,name=validators_power_cap,json=validatorsPowerCap,proto3" json:"validators_power_cap,omitempty"`
	// Corresponds to the maximum number of validators that can validate a consumer chain.
	// Only applicable to Opt In chains. Setting `validator_set_cap` on a Top N chain is a no-op.
	ValidatorSetCap uint32 `protobuf:"varint,6,opt,name=validator_set_cap,json=validatorSetCap,proto3" json:"validator_set_cap,omitempty"`
	// Corresponds to a list of provider consensus addresses of validators that are the ONLY ones that can validate
	// the consumer chain.
	Allowlist []string `protobuf:"bytes,7,rep,name=allowlist,proto3" json:"allowlist,omitempty"`
	// Corresponds to a list of provider consensus addresses of validators that CANNOT validate the consumer chain.
	Denylist []string `protobuf:"bytes,8,rep,name=denylist,proto3" json:"denylist,omitempty"`
	// Corresponds to the minimal amount of (provider chain) stake required to validate on the consumer chain.
	MinStake uint64 `protobuf:"varint,9,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// Corresponds to whether inactive validators are allowed to validate the consumer chain.
	AllowInactiveVals bool `protobuf:"varint,10,opt,name=allow_inactive_vals,json=allowInactiveVals,proto3" json:"allow_inactive_vals,omitempty"`
}

func (m *ConsumerModificationProposal) Reset()         { *m = ConsumerModificationProposal{} }
func (m *ConsumerModificationProposal) String() string { return proto.CompactTextString(m) }
func (*ConsumerModificationProposal) ProtoMessage()    {}
func (*ConsumerModificationProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{2}
}
func (m *ConsumerModificationProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerModificationProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerModificationProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerModificationProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerModificationProposal.Merge(m, src)
}
func (m *ConsumerModificationProposal) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerModificationProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerModificationProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerModificationProposal proto.InternalMessageInfo

func (m *ConsumerModificationProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ConsumerModificationProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ConsumerModificationProposal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerModificationProposal) GetTop_N() uint32 {
	if m != nil {
		return m.Top_N
	}
	return 0
}

func (m *ConsumerModificationProposal) GetValidatorsPowerCap() uint32 {
	if m != nil {
		return m.ValidatorsPowerCap
	}
	return 0
}

func (m *ConsumerModificationProposal) GetValidatorSetCap() uint32 {
	if m != nil {
		return m.ValidatorSetCap
	}
	return 0
}

func (m *ConsumerModificationProposal) GetAllowlist() []string {
	if m != nil {
		return m.Allowlist
	}
	return nil
}

func (m *ConsumerModificationProposal) GetDenylist() []string {
	if m != nil {
		return m.Denylist
	}
	return nil
}

func (m *ConsumerModificationProposal) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *ConsumerModificationProposal) GetAllowInactiveVals() bool {
	if m != nil {
		return m.AllowInactiveVals
	}
	return false
}

// EquivocationProposal is a governance proposal on the provider chain to
// punish a validator for equivocation on a consumer chain.
//
// This type is only used internally to the consumer CCV module.
// WARNING: This message is deprecated now that equivocations can be submitted
// and verified automatically on the provider. (see SubmitConsumerDoubleVoting in proto/interchain-security/ccv/provider/v1/tx.proto).
//
// Deprecated: Do not use.
type EquivocationProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the list of equivocations that will be processed
	Equivocations []*types1.Equivocation `protobuf:"bytes,3,rep,name=equivocations,proto3" json:"equivocations,omitempty"`
}

func (m *EquivocationProposal) Reset()         { *m = EquivocationProposal{} }
func (m *EquivocationProposal) String() string { return proto.CompactTextString(m) }
func (*EquivocationProposal) ProtoMessage()    {}
func (*EquivocationProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{3}
}
func (m *EquivocationProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquivocationProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquivocationProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquivocationProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquivocationProposal.Merge(m, src)
}
func (m *EquivocationProposal) XXX_Size() int {
	return m.Size()
}
func (m *EquivocationProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EquivocationProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EquivocationProposal proto.InternalMessageInfo

func (m *EquivocationProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EquivocationProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EquivocationProposal) GetEquivocations() []*types1.Equivocation {
	if m != nil {
		return m.Equivocations
	}
	return nil
}

// ChangeRewardDenomsProposal is a governance proposal on the provider chain to
// mutate the set of denoms accepted by the provider as rewards.
// Use MsgChangeRewardDenoms to submit this proposal type.
type ChangeRewardDenomsProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the list of consumer reward denoms to add
	DenomsToAdd []string `protobuf:"bytes,3,rep,name=denoms_to_add,json=denomsToAdd,proto3" json:"denoms_to_add,omitempty"`
	// the list of consumer reward denoms to remove
	DenomsToRemove []string `protobuf:"bytes,4,rep,name=denoms_to_remove,json=denomsToRemove,proto3" json:"denoms_to_remove,omitempty"`
}

func (m *ChangeRewardDenomsProposal) Reset()         { *m = ChangeRewardDenomsProposal{} }
func (m *ChangeRewardDenomsProposal) String() string { return proto.CompactTextString(m) }
func (*ChangeRewardDenomsProposal) ProtoMessage()    {}
func (*ChangeRewardDenomsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{4}
}
func (m *ChangeRewardDenomsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeRewardDenomsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeRewardDenomsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeRewardDenomsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRewardDenomsProposal.Merge(m, src)
}
func (m *ChangeRewardDenomsProposal) XXX_Size() int {
	return m.Size()
}
func (m *ChangeRewardDenomsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRewardDenomsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRewardDenomsProposal proto.InternalMessageInfo

func (m *ChangeRewardDenomsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeRewardDenomsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChangeRewardDenomsProposal) GetDenomsToAdd() []string {
	if m != nil {
		return m.DenomsToAdd
	}
	return nil
}

func (m *ChangeRewardDenomsProposal) GetDenomsToRemove() []string {
	if m != nil {
		return m.DenomsToRemove
	}
	return nil
}

// A persisted queue entry indicating that a slash packet data instance needs to
// be handled. This type belongs in the "global" queue, to coordinate slash
// packet handling times between consumers.
type GlobalSlashEntry struct {
	// Block time that slash packet was received by provider chain.
	// This field is used for store key iteration ordering.
	RecvTime time.Time `protobuf:"bytes,1,opt,name=recv_time,json=recvTime,proto3,stdtime" json:"recv_time"`
	// The consumer that sent a slash packet.
	ConsumerChainID string `protobuf:"bytes,2,opt,name=consumer_chain_id,json=consumerChainId,proto3" json:"consumer_chain_id,omitempty"`
	// The IBC sequence number of the recv packet.
	// This field is used in the store key to ensure uniqueness.
	IbcSeqNum uint64 `protobuf:"varint,3,opt,name=ibc_seq_num,json=ibcSeqNum,proto3" json:"ibc_seq_num,omitempty"`
	// The provider's consensus address of the validator being slashed.
	// This field is used to obtain validator power in HandleThrottleQueues.
	//
	// This field is not used in the store key, but is persisted in value bytes,
	// see QueueGlobalSlashEntry.
	ProviderValConsAddr []byte `protobuf:"bytes,4,opt,name=provider_val_cons_addr,json=providerValConsAddr,proto3" json:"provider_val_cons_addr,omitempty"`
}

func (m *GlobalSlashEntry) Reset()         { *m = GlobalSlashEntry{} }
func (m *GlobalSlashEntry) String() string { return proto.CompactTextString(m) }
func (*GlobalSlashEntry) ProtoMessage()    {}
func (*GlobalSlashEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{5}
}
func (m *GlobalSlashEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSlashEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSlashEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSlashEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSlashEntry.Merge(m, src)
}
func (m *GlobalSlashEntry) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSlashEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSlashEntry.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSlashEntry proto.InternalMessageInfo

func (m *GlobalSlashEntry) GetRecvTime() time.Time {
	if m != nil {
		return m.RecvTime
	}
	return time.Time{}
}

func (m *GlobalSlashEntry) GetConsumerChainID() string {
	if m != nil {
		return m.ConsumerChainID
	}
	return ""
}

func (m *GlobalSlashEntry) GetIbcSeqNum() uint64 {
	if m != nil {
		return m.IbcSeqNum
	}
	return 0
}

func (m *GlobalSlashEntry) GetProviderValConsAddr() []byte {
	if m != nil {
		return m.ProviderValConsAddr
	}
	return nil
}

// Params defines the parameters for CCV Provider module
type Params struct {
	TemplateClient *_07_tendermint.ClientState `protobuf:"bytes,1,opt,name=template_client,json=templateClient,proto3" json:"template_client,omitempty"`
	// TrustingPeriodFraction is used to compute the consumer and provider IBC
	// client's TrustingPeriod from the chain defined UnbondingPeriod
	TrustingPeriodFraction string `protobuf:"bytes,2,opt,name=trusting_period_fraction,json=trustingPeriodFraction,proto3" json:"trusting_period_fraction,omitempty"`
	// Sent IBC packets will timeout after this duration
	CcvTimeoutPeriod time.Duration `protobuf:"bytes,3,opt,name=ccv_timeout_period,json=ccvTimeoutPeriod,proto3,stdduration" json:"ccv_timeout_period"`
	// The period for which the slash meter is replenished
	SlashMeterReplenishPeriod time.Duration `protobuf:"bytes,6,opt,name=slash_meter_replenish_period,json=slashMeterReplenishPeriod,proto3,stdduration" json:"slash_meter_replenish_period"`
	// The fraction of total voting power that is replenished to the slash meter
	// every replenish period. This param also serves as a maximum fraction of
	// total voting power that the slash meter can hold.
	SlashMeterReplenishFraction string `protobuf:"bytes,7,opt,name=slash_meter_replenish_fraction,json=slashMeterReplenishFraction,proto3" json:"slash_meter_replenish_fraction,omitempty"`
	// The fee required to be paid to add a reward denom
	ConsumerRewardDenomRegistrationFee types2.Coin `protobuf:"bytes,9,opt,name=consumer_reward_denom_registration_fee,json=consumerRewardDenomRegistrationFee,proto3" json:"consumer_reward_denom_registration_fee"`
	// The number of blocks that comprise an epoch.
	BlocksPerEpoch int64 `protobuf:"varint,10,opt,name=blocks_per_epoch,json=blocksPerEpoch,proto3" json:"blocks_per_epoch,omitempty"`
	// The number of epochs a validator has to validate a consumer chain in order to start receiving rewards from that chain.
	NumberOfEpochsToStartReceivingRewards int64 `protobuf:"varint,11,opt,name=number_of_epochs_to_start_receiving_rewards,json=numberOfEpochsToStartReceivingRewards,proto3" json:"number_of_epochs_to_start_receiving_rewards,omitempty"`
	// The maximal number of validators that will be passed
	// to the consensus engine on the provider.
	MaxProviderConsensusValidators int64 `protobuf:"varint,12,opt,name=max_provider_consensus_validators,json=maxProviderConsensusValidators,proto3" json:"max_provider_consensus_validators,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{6}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTemplateClient() *_07_tendermint.ClientState {
	if m != nil {
		return m.TemplateClient
	}
	return nil
}

func (m *Params) GetTrustingPeriodFraction() string {
	if m != nil {
		return m.TrustingPeriodFraction
	}
	return ""
}

func (m *Params) GetCcvTimeoutPeriod() time.Duration {
	if m != nil {
		return m.CcvTimeoutPeriod
	}
	return 0
}

func (m *Params) GetSlashMeterReplenishPeriod() time.Duration {
	if m != nil {
		return m.SlashMeterReplenishPeriod
	}
	return 0
}

func (m *Params) GetSlashMeterReplenishFraction() string {
	if m != nil {
		return m.SlashMeterReplenishFraction
	}
	return ""
}

func (m *Params) GetConsumerRewardDenomRegistrationFee() types2.Coin {
	if m != nil {
		return m.ConsumerRewardDenomRegistrationFee
	}
	return types2.Coin{}
}

func (m *Params) GetBlocksPerEpoch() int64 {
	if m != nil {
		return m.BlocksPerEpoch
	}
	return 0
}

func (m *Params) GetNumberOfEpochsToStartReceivingRewards() int64 {
	if m != nil {
		return m.NumberOfEpochsToStartReceivingRewards
	}
	return 0
}

func (m *Params) GetMaxProviderConsensusValidators() int64 {
	if m != nil {
		return m.MaxProviderConsensusValidators
	}
	return 0
}

// SlashAcks contains cons addresses of consumer chain validators
// successfully slashed on the provider chain.
type SlashAcks struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *SlashAcks) Reset()         { *m = SlashAcks{} }
func (m *SlashAcks) String() string { return proto.CompactTextString(m) }
func (*SlashAcks) ProtoMessage()    {}
func (*SlashAcks) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{7}
}
func (m *SlashAcks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashAcks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashAcks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashAcks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashAcks.Merge(m, src)
}
func (m *SlashAcks) XXX_Size() int {
	return m.Size()
}
func (m *SlashAcks) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashAcks.DiscardUnknown(m)
}

var xxx_messageInfo_SlashAcks proto.InternalMessageInfo

func (m *SlashAcks) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// ConsumerAdditionProposals holds pending governance proposals on the provider
// chain to spawn a new chain.
type ConsumerAdditionProposals struct {
	// proposals waiting for spawn_time to pass
	Pending []*ConsumerAdditionProposal `protobuf:"bytes,1,rep,name=pending,proto3" json:"pending,omitempty"`
}

func (m *ConsumerAdditionProposals) Reset()         { *m = ConsumerAdditionProposals{} }
func (m *ConsumerAdditionProposals) String() string { return proto.CompactTextString(m) }
func (*ConsumerAdditionProposals) ProtoMessage()    {}
func (*ConsumerAdditionProposals) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{8}
}
func (m *ConsumerAdditionProposals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAdditionProposals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAdditionProposals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAdditionProposals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAdditionProposals.Merge(m, src)
}
func (m *ConsumerAdditionProposals) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAdditionProposals) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAdditionProposals.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAdditionProposals proto.InternalMessageInfo

func (m *ConsumerAdditionProposals) GetPending() []*ConsumerAdditionProposal {
	if m != nil {
		return m.Pending
	}
	return nil
}

// ConsumerRemovalProposals holds pending governance proposals on the provider
// chain to remove (and stop) a consumer chain.
type ConsumerRemovalProposals struct {
	// proposals waiting for stop_time to pass
	Pending []*ConsumerRemovalProposal `protobuf:"bytes,1,rep,name=pending,proto3" json:"pending,omitempty"`
}

func (m *ConsumerRemovalProposals) Reset()         { *m = ConsumerRemovalProposals{} }
func (m *ConsumerRemovalProposals) String() string { return proto.CompactTextString(m) }
func (*ConsumerRemovalProposals) ProtoMessage()    {}
func (*ConsumerRemovalProposals) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{9}
}
func (m *ConsumerRemovalProposals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRemovalProposals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRemovalProposals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerRemovalProposals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRemovalProposals.Merge(m, src)
}
func (m *ConsumerRemovalProposals) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRemovalProposals) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRemovalProposals.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRemovalProposals proto.InternalMessageInfo

func (m *ConsumerRemovalProposals) GetPending() []*ConsumerRemovalProposal {
	if m != nil {
		return m.Pending
	}
	return nil
}

// AddressList contains a list of consensus addresses
type AddressList struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *AddressList) Reset()         { *m = AddressList{} }
func (m *AddressList) String() string { return proto.CompactTextString(m) }
func (*AddressList) ProtoMessage()    {}
func (*AddressList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{10}
}
func (m *AddressList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressList.Merge(m, src)
}
func (m *AddressList) XXX_Size() int {
	return m.Size()
}
func (m *AddressList) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressList.DiscardUnknown(m)
}

var xxx_messageInfo_AddressList proto.InternalMessageInfo

func (m *AddressList) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// WARNING: This message is deprecated and is not used.
// ChannelToChain is used to map a CCV channel ID to the consumer chainID
//
// Deprecated: Do not use.
type ChannelToChain struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChainId   string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ChannelToChain) Reset()         { *m = ChannelToChain{} }
func (m *ChannelToChain) String() string { return proto.CompactTextString(m) }
func (*ChannelToChain) ProtoMessage()    {}
func (*ChannelToChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{11}
}
func (m *ChannelToChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelToChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelToChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelToChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelToChain.Merge(m, src)
}
func (m *ChannelToChain) XXX_Size() int {
	return m.Size()
}
func (m *ChannelToChain) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelToChain.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelToChain proto.InternalMessageInfo

func (m *ChannelToChain) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelToChain) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// ValidatorSetChangePackets is a pb list of ccv.ValidatorSetChangePacketData.
type ValidatorSetChangePackets struct {
	List []types3.ValidatorSetChangePacketData `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (m *ValidatorSetChangePackets) Reset()         { *m = ValidatorSetChangePackets{} }
func (m *ValidatorSetChangePackets) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChangePackets) ProtoMessage()    {}
func (*ValidatorSetChangePackets) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{12}
}
func (m *ValidatorSetChangePackets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChangePackets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChangePackets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChangePackets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChangePackets.Merge(m, src)
}
func (m *ValidatorSetChangePackets) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChangePackets) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChangePackets.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChangePackets proto.InternalMessageInfo

func (m *ValidatorSetChangePackets) GetList() []types3.ValidatorSetChangePacketData {
	if m != nil {
		return m.List
	}
	return nil
}

type KeyAssignmentReplacement struct {
	ProviderAddr []byte            `protobuf:"bytes,1,opt,name=provider_addr,json=providerAddr,proto3" json:"provider_addr,omitempty"`
	PrevCKey     *crypto.PublicKey `protobuf:"bytes,2,opt,name=prev_c_key,json=prevCKey,proto3" json:"prev_c_key,omitempty"`
	Power        int64             `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *KeyAssignmentReplacement) Reset()         { *m = KeyAssignmentReplacement{} }
func (m *KeyAssignmentReplacement) String() string { return proto.CompactTextString(m) }
func (*KeyAssignmentReplacement) ProtoMessage()    {}
func (*KeyAssignmentReplacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{13}
}
func (m *KeyAssignmentReplacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyAssignmentReplacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyAssignmentReplacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyAssignmentReplacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAssignmentReplacement.Merge(m, src)
}
func (m *KeyAssignmentReplacement) XXX_Size() int {
	return m.Size()
}
func (m *KeyAssignmentReplacement) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAssignmentReplacement.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAssignmentReplacement proto.InternalMessageInfo

func (m *KeyAssignmentReplacement) GetProviderAddr() []byte {
	if m != nil {
		return m.ProviderAddr
	}
	return nil
}

func (m *KeyAssignmentReplacement) GetPrevCKey() *crypto.PublicKey {
	if m != nil {
		return m.PrevCKey
	}
	return nil
}

func (m *KeyAssignmentReplacement) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

// Used to serialize the ValidatorConsumerPubKey index from key assignment
// ValidatorConsumerPubKey: (chainID, providerAddr consAddr) -> consumerKey
// tmprotocrypto.PublicKey
type ValidatorConsumerPubKey struct {
	ChainId      string            `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProviderAddr []byte            `protobuf:"bytes,2,opt,name=provider_addr,json=providerAddr,proto3" json:"provider_addr,omitempty"`
	ConsumerKey  *crypto.PublicKey `protobuf:"bytes,3,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
}

func (m *ValidatorConsumerPubKey) Reset()         { *m = ValidatorConsumerPubKey{} }
func (m *ValidatorConsumerPubKey) String() string { return proto.CompactTextString(m) }
func (*ValidatorConsumerPubKey) ProtoMessage()    {}
func (*ValidatorConsumerPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{14}
}
func (m *ValidatorConsumerPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorConsumerPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorConsumerPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorConsumerPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorConsumerPubKey.Merge(m, src)
}
func (m *ValidatorConsumerPubKey) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorConsumerPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorConsumerPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorConsumerPubKey proto.InternalMessageInfo

func (m *ValidatorConsumerPubKey) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorConsumerPubKey) GetProviderAddr() []byte {
	if m != nil {
		return m.ProviderAddr
	}
	return nil
}

func (m *ValidatorConsumerPubKey) GetConsumerKey() *crypto.PublicKey {
	if m != nil {
		return m.ConsumerKey
	}
	return nil
}

// Used to serialize the ValidatorConsumerAddr index from key assignment
// ValidatorByConsumerAddr: (chainID, consumerAddr consAddr) -> providerAddr
// consAddr
type ValidatorByConsumerAddr struct {
	ChainId      string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConsumerAddr []byte `protobuf:"bytes,2,opt,name=consumer_addr,json=consumerAddr,proto3" json:"consumer_addr,omitempty"`
	ProviderAddr []byte `protobuf:"bytes,3,opt,name=provider_addr,json=providerAddr,proto3" json:"provider_addr,omitempty"`
}

func (m *ValidatorByConsumerAddr) Reset()         { *m = ValidatorByConsumerAddr{} }
func (m *ValidatorByConsumerAddr) String() string { return proto.CompactTextString(m) }
func (*ValidatorByConsumerAddr) ProtoMessage()    {}
func (*ValidatorByConsumerAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{15}
}
func (m *ValidatorByConsumerAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorByConsumerAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorByConsumerAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorByConsumerAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorByConsumerAddr.Merge(m, src)
}
func (m *ValidatorByConsumerAddr) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorByConsumerAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorByConsumerAddr.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorByConsumerAddr proto.InternalMessageInfo

func (m *ValidatorByConsumerAddr) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorByConsumerAddr) GetConsumerAddr() []byte {
	if m != nil {
		return m.ConsumerAddr
	}
	return nil
}

func (m *ValidatorByConsumerAddr) GetProviderAddr() []byte {
	if m != nil {
		return m.ProviderAddr
	}
	return nil
}

// Used to serialize the ConsumerAddrsToPruneV2 index from key assignment
// ConsumerAddrsToPruneV2: (chainID, pruneTs time.Time) -> consumerAddrs AddressList
type ConsumerAddrsToPruneV2 struct {
	ChainId       string       `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PruneTs       time.Time    `protobuf:"bytes,2,opt,name=prune_ts,json=pruneTs,proto3,stdtime" json:"prune_ts"`
	ConsumerAddrs *AddressList `protobuf:"bytes,3,opt,name=consumer_addrs,json=consumerAddrs,proto3" json:"consumer_addrs,omitempty"`
}

func (m *ConsumerAddrsToPruneV2) Reset()         { *m = ConsumerAddrsToPruneV2{} }
func (m *ConsumerAddrsToPruneV2) String() string { return proto.CompactTextString(m) }
func (*ConsumerAddrsToPruneV2) ProtoMessage()    {}
func (*ConsumerAddrsToPruneV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{16}
}
func (m *ConsumerAddrsToPruneV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAddrsToPruneV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAddrsToPruneV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAddrsToPruneV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAddrsToPruneV2.Merge(m, src)
}
func (m *ConsumerAddrsToPruneV2) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAddrsToPruneV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAddrsToPruneV2.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAddrsToPruneV2 proto.InternalMessageInfo

func (m *ConsumerAddrsToPruneV2) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConsumerAddrsToPruneV2) GetPruneTs() time.Time {
	if m != nil {
		return m.PruneTs
	}
	return time.Time{}
}

func (m *ConsumerAddrsToPruneV2) GetConsumerAddrs() *AddressList {
	if m != nil {
		return m.ConsumerAddrs
	}
	return nil
}

// ConsensusValidator is used to express a validator that
// should be validating on a chain.
// It contains relevant info for
// a validator that is expected to validate on
// either the provider or a consumer chain.
type ConsensusValidator struct {
	// validator's consensus address on the provider chain
	ProviderConsAddr []byte `protobuf:"bytes,1,opt,name=provider_cons_addr,json=providerConsAddr,proto3" json:"provider_cons_addr,omitempty"`
	// voting power the validator has during this epoch
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	// public key the validator uses on the consumer chain during this epoch
	PublicKey *crypto.PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// height the validator had when it FIRST became a consumer validator
	// If a validator becomes a consumer validator at height `H` and is continuously a consumer validator for all the upcoming
	// epochs, then the height of the validator SHOULD remain `H`. This height only resets to a different height if a validator
	// stops being a consumer validator during an epoch and later becomes again a consumer validator.
	JoinHeight int64 `protobuf:"varint,4,opt,name=join_height,json=joinHeight,proto3" json:"join_height,omitempty"`
}

func (m *ConsensusValidator) Reset()         { *m = ConsensusValidator{} }
func (m *ConsensusValidator) String() string { return proto.CompactTextString(m) }
func (*ConsensusValidator) ProtoMessage()    {}
func (*ConsensusValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{17}
}
func (m *ConsensusValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusValidator.Merge(m, src)
}
func (m *ConsensusValidator) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusValidator.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusValidator proto.InternalMessageInfo

func (m *ConsensusValidator) GetProviderConsAddr() []byte {
	if m != nil {
		return m.ProviderConsAddr
	}
	return nil
}

func (m *ConsensusValidator) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *ConsensusValidator) GetPublicKey() *crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ConsensusValidator) GetJoinHeight() int64 {
	if m != nil {
		return m.JoinHeight
	}
	return 0
}

// ConsumerRewardsAllocation stores the rewards allocated by a consumer chain
// to the consumer rewards pool. It is used to allocate the tokens to the consumer
// opted-in validators and the community pool during BeginBlock.
type ConsumerRewardsAllocation struct {
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *ConsumerRewardsAllocation) Reset()         { *m = ConsumerRewardsAllocation{} }
func (m *ConsumerRewardsAllocation) String() string { return proto.CompactTextString(m) }
func (*ConsumerRewardsAllocation) ProtoMessage()    {}
func (*ConsumerRewardsAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{18}
}
func (m *ConsumerRewardsAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRewardsAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRewardsAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerRewardsAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRewardsAllocation.Merge(m, src)
}
func (m *ConsumerRewardsAllocation) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRewardsAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRewardsAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRewardsAllocation proto.InternalMessageInfo

func (m *ConsumerRewardsAllocation) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// ConsumerMetadata contains general information about the registered chain
type ConsumerMetadata struct {
	// the name of the chain
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the description of the chain
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the metadata (e.g., GitHub repository URL) of the chain
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ConsumerMetadata) Reset()         { *m = ConsumerMetadata{} }
func (m *ConsumerMetadata) String() string { return proto.CompactTextString(m) }
func (*ConsumerMetadata) ProtoMessage()    {}
func (*ConsumerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{19}
}
func (m *ConsumerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerMetadata.Merge(m, src)
}
func (m *ConsumerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerMetadata proto.InternalMessageInfo

func (m *ConsumerMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConsumerMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ConsumerMetadata) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// ConsumerInitializationParameters are the parameters needed to launch a chain
type ConsumerInitializationParameters struct {
	// the proposed initial height of new consumer chain.
	// For a completely new chain, this will be {0,1}. However, it may be
	// different if this is a chain that is converting to a consumer chain.
	InitialHeight types.Height `protobuf:"bytes,1,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height"`
	// The hash of the consumer chain genesis state without the consumer CCV
	// module genesis params. It is used for off-chain confirmation of
	// genesis.json validity by validators and other parties.
	GenesisHash []byte `protobuf:"bytes,2,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	// The hash of the consumer chain binary that should be run by validators on
	// chain initialization. It is used for off-chain confirmation of binary
	// validity by validators and other parties.
	BinaryHash []byte `protobuf:"bytes,3,opt,name=binary_hash,json=binaryHash,proto3" json:"binary_hash,omitempty"`
	// spawn time is the time on the provider chain at which the consumer chain
	// genesis is finalized and all validators will be responsible for starting
	// their consumer chain validator node.
	SpawnTime time.Time `protobuf:"bytes,4,opt,name=spawn_time,json=spawnTime,proto3,stdtime" json:"spawn_time"`
	// Unbonding period for the consumer,
	// which should be smaller than that of the provider in general.
	UnbondingPeriod time.Duration `protobuf:"bytes,5,opt,name=unbonding_period,json=unbondingPeriod,proto3,stdduration" json:"unbonding_period"`
	// Sent CCV related IBC packets will timeout after this duration
	CcvTimeoutPeriod time.Duration `protobuf:"bytes,6,opt,name=ccv_timeout_period,json=ccvTimeoutPeriod,proto3,stdduration" json:"ccv_timeout_period"`
	// Sent transfer related IBC packets will timeout after this duration
	TransferTimeoutPeriod time.Duration `protobuf:"bytes,7,opt,name=transfer_timeout_period,json=transferTimeoutPeriod,proto3,stdduration" json:"transfer_timeout_period"`
	// The fraction of tokens allocated to the consumer redistribution address
	// during distribution events. The fraction is a string representing a
	// decimal number. For example "0.75" would represent 75%.
	ConsumerRedistributionFraction string `protobuf:"bytes,8,opt,name=consumer_redistribution_fraction,json=consumerRedistributionFraction,proto3" json:"consumer_redistribution_fraction,omitempty"`
	// BlocksPerDistributionTransmission is the number of blocks between
	// ibc-token-transfers from the consumer chain to the provider chain. On
	// sending transmission event, `consumer_redistribution_fraction` of the
	// accumulated tokens are sent to the consumer redistribution address.
	BlocksPerDistributionTransmission int64 `protobuf:"varint,9,opt,name=blocks_per_distribution_transmission,json=blocksPerDistributionTransmission,proto3" json:"blocks_per_distribution_transmission,omitempty"`
	// The number of historical info entries to persist in store.
	// This param is a part of the cosmos sdk staking module. In the case of
	// a ccv enabled consumer chain, the ccv module acts as the staking module.
	HistoricalEntries int64 `protobuf:"varint,10,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// The ID of a token transfer channel used for the Reward Distribution
	// sub-protocol. If DistributionTransmissionChannel == "", a new transfer
	// channel is created on top of the same connection as the CCV channel.
	// Note that transfer_channel_id is the ID of the channel end on the consumer
	// chain. it is most relevant for chains performing a sovereign to consumer
	// changeover in order to maintain the existing ibc transfer channel
	DistributionTransmissionChannel string `protobuf:"bytes,11,opt,name=distribution_transmission_channel,json=distributionTransmissionChannel,proto3" json:"distribution_transmission_channel,omitempty"`
}

func (m *ConsumerInitializationParameters) Reset()         { *m = ConsumerInitializationParameters{} }
func (m *ConsumerInitializationParameters) String() string { return proto.CompactTextString(m) }
func (*ConsumerInitializationParameters) ProtoMessage()    {}
func (*ConsumerInitializationParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{20}
}
func (m *ConsumerInitializationParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerInitializationParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerInitializationParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerInitializationParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerInitializationParameters.Merge(m, src)
}
func (m *ConsumerInitializationParameters) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerInitializationParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerInitializationParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerInitializationParameters proto.InternalMessageInfo

func (m *ConsumerInitializationParameters) GetInitialHeight() types.Height {
	if m != nil {
		return m.InitialHeight
	}
	return types.Height{}
}

func (m *ConsumerInitializationParameters) GetGenesisHash() []byte {
	if m != nil {
		return m.GenesisHash
	}
	return nil
}

func (m *ConsumerInitializationParameters) GetBinaryHash() []byte {
	if m != nil {
		return m.BinaryHash
	}
	return nil
}

func (m *ConsumerInitializationParameters) GetSpawnTime() time.Time {
	if m != nil {
		return m.SpawnTime
	}
	return time.Time{}
}

func (m *ConsumerInitializationParameters) GetUnbondingPeriod() time.Duration {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func (m *ConsumerInitializationParameters) GetCcvTimeoutPeriod() time.Duration {
	if m != nil {
		return m.CcvTimeoutPeriod
	}
	return 0
}

func (m *ConsumerInitializationParameters) GetTransferTimeoutPeriod() time.Duration {
	if m != nil {
		return m.TransferTimeoutPeriod
	}
	return 0
}

func (m *ConsumerInitializationParameters) GetConsumerRedistributionFraction() string {
	if m != nil {
		return m.ConsumerRedistributionFraction
	}
	return ""
}

func (m *ConsumerInitializationParameters) GetBlocksPerDistributionTransmission() int64 {
	if m != nil {
		return m.BlocksPerDistributionTransmission
	}
	return 0
}

func (m *ConsumerInitializationParameters) GetHistoricalEntries() int64 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *ConsumerInitializationParameters) GetDistributionTransmissionChannel() string {
	if m != nil {
		return m.DistributionTransmissionChannel
	}
	return ""
}

// PowerShapingParameters contains parameters that shape the validator set that we send to the consumer chain
type PowerShapingParameters struct {
	// Corresponds to the percentage of validators that have to validate the chain under the Top N case.
	// For example, 53 corresponds to a Top 53% chain, meaning that the top 53% provider validators by voting power
	// have to validate the proposed consumer chain. top_N can either be 0 or any value in [50, 100].
	// A chain can join with top_N == 0 as an Opt In chain, or with top_N âˆˆ [50, 100] as a Top N chain.
	Top_N uint32 `protobuf:"varint,1,opt,name=top_N,json=topN,proto3" json:"top_N,omitempty"`
	// Corresponds to the maximum power (percentage-wise) a validator can have on the consumer chain. For instance, if
	// `validators_power_cap` is set to 32, it means that no validator can have more than 32% of the voting power on the
	// consumer chain. Note that this might not be feasible. For example, think of a consumer chain with only
	// 5 validators and with `validators_power_cap` set to 10%. In such a scenario, at least one validator would need
	// to have more than 20% of the total voting power. Therefore, `validators_power_cap` operates on a best-effort basis.
	ValidatorsPowerCap uint32 `protobuf:"varint,2,opt,name=validators_power_cap,json=validatorsPowerCap,proto3" json:"validators_power_cap,omitempty"`
	// Corresponds to the maximum number of validators that can validate a consumer chain.
	// Only applicable to Opt In chains. Setting `validator_set_cap` on a Top N chain is a no-op.
	ValidatorSetCap uint32 `protobuf:"varint,3,opt,name=validator_set_cap,json=validatorSetCap,proto3" json:"validator_set_cap,omitempty"`
	// corresponds to a list of provider consensus addresses of validators that are the ONLY ones that can validate the consumer chain
	Allowlist []string `protobuf:"bytes,4,rep,name=allowlist,proto3" json:"allowlist,omitempty"`
	// corresponds to a list of provider consensus addresses of validators that CANNOT validate the consumer chain
	Denylist []string `protobuf:"bytes,5,rep,name=denylist,proto3" json:"denylist,omitempty"`
	// Corresponds to the minimal amount of (provider chain) stake required to validate on the consumer chain.
	MinStake uint64 `protobuf:"varint,6,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// Corresponds to whether inactive validators are allowed to validate the consumer chain.
	AllowInactiveVals bool `protobuf:"varint,7,opt,name=allow_inactive_vals,json=allowInactiveVals,proto3" json:"allow_inactive_vals,omitempty"`
}

func (m *PowerShapingParameters) Reset()         { *m = PowerShapingParameters{} }
func (m *PowerShapingParameters) String() string { return proto.CompactTextString(m) }
func (*PowerShapingParameters) ProtoMessage()    {}
func (*PowerShapingParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{21}
}
func (m *PowerShapingParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerShapingParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerShapingParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerShapingParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerShapingParameters.Merge(m, src)
}
func (m *PowerShapingParameters) XXX_Size() int {
	return m.Size()
}
func (m *PowerShapingParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerShapingParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PowerShapingParameters proto.InternalMessageInfo

func (m *PowerShapingParameters) GetTop_N() uint32 {
	if m != nil {
		return m.Top_N
	}
	return 0
}

func (m *PowerShapingParameters) GetValidatorsPowerCap() uint32 {
	if m != nil {
		return m.ValidatorsPowerCap
	}
	return 0
}

func (m *PowerShapingParameters) GetValidatorSetCap() uint32 {
	if m != nil {
		return m.ValidatorSetCap
	}
	return 0
}

func (m *PowerShapingParameters) GetAllowlist() []string {
	if m != nil {
		return m.Allowlist
	}
	return nil
}

func (m *PowerShapingParameters) GetDenylist() []string {
	if m != nil {
		return m.Denylist
	}
	return nil
}

func (m *PowerShapingParameters) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *PowerShapingParameters) GetAllowInactiveVals() bool {
	if m != nil {
		return m.AllowInactiveVals
	}
	return false
}

// ConsumerIds contains consumer ids of chains
// Used so we can easily (de)serialize slices of strings
type ConsumerIds struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ConsumerIds) Reset()         { *m = ConsumerIds{} }
func (m *ConsumerIds) String() string { return proto.CompactTextString(m) }
func (*ConsumerIds) ProtoMessage()    {}
func (*ConsumerIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ec409a72b7b72, []int{22}
}
func (m *ConsumerIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerIds.Merge(m, src)
}
func (m *ConsumerIds) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerIds.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerIds proto.InternalMessageInfo

func (m *ConsumerIds) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("interchain_security.ccv.provider.v1.ConsumerPhase", ConsumerPhase_name, ConsumerPhase_value)
	proto.RegisterType((*ConsumerAdditionProposal)(nil), "interchain_security.ccv.provider.v1.ConsumerAdditionProposal")
	proto.RegisterType((*ConsumerRemovalProposal)(nil), "interchain_security.ccv.provider.v1.ConsumerRemovalProposal")
	proto.RegisterType((*ConsumerModificationProposal)(nil), "interchain_security.ccv.provider.v1.ConsumerModificationProposal")
	proto.RegisterType((*EquivocationProposal)(nil), "interchain_security.ccv.provider.v1.EquivocationProposal")
	proto.RegisterType((*ChangeRewardDenomsProposal)(nil), "interchain_security.ccv.provider.v1.ChangeRewardDenomsProposal")
	proto.RegisterType((*GlobalSlashEntry)(nil), "interchain_security.ccv.provider.v1.GlobalSlashEntry")
	proto.RegisterType((*Params)(nil), "interchain_security.ccv.provider.v1.Params")
	proto.RegisterType((*SlashAcks)(nil), "interchain_security.ccv.provider.v1.SlashAcks")
	proto.RegisterType((*ConsumerAdditionProposals)(nil), "interchain_security.ccv.provider.v1.ConsumerAdditionProposals")
	proto.RegisterType((*ConsumerRemovalProposals)(nil), "interchain_security.ccv.provider.v1.ConsumerRemovalProposals")
	proto.RegisterType((*AddressList)(nil), "interchain_security.ccv.provider.v1.AddressList")
	proto.RegisterType((*ChannelToChain)(nil), "interchain_security.ccv.provider.v1.ChannelToChain")
	proto.RegisterType((*ValidatorSetChangePackets)(nil), "interchain_security.ccv.provider.v1.ValidatorSetChangePackets")
	proto.RegisterType((*KeyAssignmentReplacement)(nil), "interchain_security.ccv.provider.v1.KeyAssignmentReplacement")
	proto.RegisterType((*ValidatorConsumerPubKey)(nil), "interchain_security.ccv.provider.v1.ValidatorConsumerPubKey")
	proto.RegisterType((*ValidatorByConsumerAddr)(nil), "interchain_security.ccv.provider.v1.ValidatorByConsumerAddr")
	proto.RegisterType((*ConsumerAddrsToPruneV2)(nil), "interchain_security.ccv.provider.v1.ConsumerAddrsToPruneV2")
	proto.RegisterType((*ConsensusValidator)(nil), "interchain_security.ccv.provider.v1.ConsensusValidator")
	proto.RegisterType((*ConsumerRewardsAllocation)(nil), "interchain_security.ccv.provider.v1.ConsumerRewardsAllocation")
	proto.RegisterType((*ConsumerMetadata)(nil), "interchain_security.ccv.provider.v1.ConsumerMetadata")
	proto.RegisterType((*ConsumerInitializationParameters)(nil), "interchain_security.ccv.provider.v1.ConsumerInitializationParameters")
	proto.RegisterType((*PowerShapingParameters)(nil), "interchain_security.ccv.provider.v1.PowerShapingParameters")
	proto.RegisterType((*ConsumerIds)(nil), "interchain_security.ccv.provider.v1.ConsumerIds")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/provider.proto", fileDescriptor_f22ec409a72b7b72)
}

var fileDescriptor_f22ec409a72b7b72 = []byte{
	// 2249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x6f, 0x1b, 0xb9,
	0xd9, 0xf7, 0x58, 0xb2, 0x2d, 0x51, 0xfe, 0x90, 0x99, 0x6c, 0x32, 0x76, 0xbc, 0x92, 0xa2, 0x7d,
	0xb3, 0xd0, 0x9b, 0x34, 0xd2, 0xda, 0x0b, 0x14, 0x41, 0xda, 0x45, 0xa0, 0x48, 0x4a, 0xa2, 0x7c,
	0x38, 0xea, 0x48, 0xf1, 0x02, 0xe9, 0x61, 0x40, 0xcd, 0xd0, 0x12, 0xeb, 0x99, 0xe1, 0x64, 0x48,
	0x4d, 0xa2, 0x1e, 0x7a, 0x5e, 0x14, 0x28, 0xb0, 0xed, 0x69, 0xd1, 0x4b, 0x17, 0xe8, 0xa5, 0xe8,
	0xa9, 0x87, 0xa2, 0x7f, 0x40, 0x4f, 0xdb, 0x02, 0x05, 0xb6, 0xb7, 0x9e, 0x76, 0x8b, 0xe4, 0xd0,
	0x43, 0x81, 0xf6, 0xdc, 0x5b, 0x41, 0xce, 0x87, 0x46, 0xfe, 0x8a, 0x82, 0x38, 0xbd, 0xd8, 0xc3,
	0xe7, 0xf9, 0x3d, 0x0f, 0x1f, 0x92, 0xcf, 0x17, 0x29, 0xb0, 0x43, 0x1c, 0x8e, 0x3d, 0x63, 0x88,
	0x88, 0xa3, 0x33, 0x6c, 0x8c, 0x3c, 0xc2, 0xc7, 0x35, 0xc3, 0xf0, 0x6b, 0xae, 0x47, 0x7d, 0x62,
	0x62, 0xaf, 0xe6, 0x6f, 0xc7, 0xdf, 0x55, 0xd7, 0xa3, 0x9c, 0xc2, 0x0f, 0x8e, 0x91, 0xa9, 0x1a,
	0x86, 0x5f, 0x8d, 0x71, 0xfe, 0xf6, 0xe6, 0x95, 0x93, 0x14, 0xfb, 0xdb, 0xb5, 0xe7, 0xc4, 0xc3,
	0x81, 0xae, 0xcd, 0xf3, 0x03, 0x3a, 0xa0, 0xf2, 0xb3, 0x26, 0xbe, 0x42, 0x6a, 0x71, 0x40, 0xe9,
	0xc0, 0xc2, 0x35, 0x39, 0xea, 0x8f, 0xf6, 0x6b, 0x9c, 0xd8, 0x98, 0x71, 0x64, 0xbb, 0x21, 0xa0,
	0x70, 0x18, 0x60, 0x8e, 0x3c, 0xc4, 0x09, 0x75, 0x22, 0x05, 0xa4, 0x6f, 0xd4, 0x0c, 0xea, 0xe1,
	0x9a, 0x61, 0x11, 0xec, 0x70, 0x31, 0x6b, 0xf0, 0x15, 0x02, 0x6a, 0x02, 0x60, 0x91, 0xc1, 0x90,
	0x07, 0x64, 0x56, 0xe3, 0xd8, 0x31, 0xb1, 0x67, 0x93, 0x00, 0x3c, 0x19, 0x85, 0x02, 0x5b, 0x09,
	0xbe, 0xe1, 0x8d, 0x5d, 0x4e, 0x6b, 0x07, 0x78, 0xcc, 0x42, 0xee, 0x87, 0x06, 0x65, 0x36, 0x65,
	0x35, 0x2c, 0xd6, 0xef, 0x18, 0xb8, 0xe6, 0x6f, 0xf7, 0x31, 0x47, 0xdb, 0x31, 0x21, 0xb2, 0x3b,
	0xc4, 0xf5, 0x11, 0x9b, 0x60, 0x0c, 0x4a, 0x22, 0xbb, 0x37, 0x02, 0xbe, 0x1e, 0xec, 0x48, 0x30,
	0x08, 0x59, 0xeb, 0xc8, 0x26, 0x0e, 0xad, 0xc9, 0xbf, 0x01, 0xa9, 0xfc, 0x9f, 0x0c, 0x50, 0x1b,
	0xd4, 0x61, 0x23, 0x1b, 0x7b, 0x75, 0xd3, 0x24, 0x62, 0x03, 0x3a, 0x1e, 0x75, 0x29, 0x43, 0x16,
	0x3c, 0x0f, 0x16, 0x38, 0xe1, 0x16, 0x56, 0x95, 0x92, 0x52, 0xc9, 0x6a, 0xc1, 0x00, 0x96, 0x40,
	0xce, 0xc4, 0xcc, 0xf0, 0x88, 0x2b, 0xc0, 0xea, 0xbc, 0xe4, 0x25, 0x49, 0x70, 0x03, 0x64, 0x82,
	0x53, 0x23, 0xa6, 0x9a, 0x92, 0xec, 0x25, 0x39, 0x6e, 0x9b, 0xf0, 0x2e, 0x58, 0x25, 0x0e, 0xe1,
	0x04, 0x59, 0xfa, 0x10, 0x8b, 0xbd, 0x53, 0xd3, 0x25, 0xa5, 0x92, 0xdb, 0xd9, 0xac, 0x92, 0xbe,
	0x51, 0x15, 0xdb, 0x5d, 0x0d, 0x37, 0xd9, 0xdf, 0xae, 0xde, 0x93, 0x88, 0xdb, 0xe9, 0xaf, 0xbe,
	0x29, 0xce, 0x69, 0x2b, 0xa1, 0x5c, 0x40, 0x84, 0x97, 0xc1, 0xf2, 0x00, 0x3b, 0x98, 0x11, 0xa6,
	0x0f, 0x11, 0x1b, 0xaa, 0x0b, 0x25, 0xa5, 0xb2, 0xac, 0xe5, 0x42, 0xda, 0x3d, 0xc4, 0x86, 0xb0,
	0x08, 0x72, 0x7d, 0xe2, 0x20, 0x6f, 0x1c, 0x20, 0x16, 0x25, 0x02, 0x04, 0x24, 0x09, 0x68, 0x00,
	0xc0, 0x5c, 0xf4, 0xdc, 0xd1, 0x85, 0x6f, 0xa8, 0x4b, 0xa1, 0x21, 0x81, 0x5f, 0x54, 0x23, 0xbf,
	0xa8, 0xf6, 0x22, 0xc7, 0xb9, 0x9d, 0x11, 0x86, 0x7c, 0xfe, 0x6d, 0x51, 0xd1, 0xb2, 0x52, 0x4e,
	0x70, 0xe0, 0x2e, 0xc8, 0x8f, 0x9c, 0x3e, 0x75, 0x4c, 0xe2, 0x0c, 0x74, 0x17, 0x7b, 0x84, 0x9a,
	0x6a, 0x46, 0xaa, 0xda, 0x38, 0xa2, 0xaa, 0x19, 0xba, 0x58, 0xa0, 0xe9, 0x0b, 0xa1, 0x69, 0x2d,
	0x16, 0xee, 0x48, 0x59, 0xf8, 0x03, 0x00, 0x0d, 0xc3, 0x97, 0x26, 0xd1, 0x11, 0x8f, 0x34, 0x66,
	0x67, 0xd7, 0x98, 0x37, 0x0c, 0xbf, 0x17, 0x48, 0x87, 0x2a, 0x7f, 0x08, 0x2e, 0x72, 0x0f, 0x39,
	0x6c, 0x1f, 0x7b, 0x87, 0xf5, 0x82, 0xd9, 0xf5, 0xbe, 0x17, 0xe9, 0x98, 0x56, 0x7e, 0x0f, 0x94,
	0x8c, 0xd0, 0x81, 0x74, 0x0f, 0x9b, 0x84, 0x71, 0x8f, 0xf4, 0x47, 0x42, 0x56, 0xdf, 0xf7, 0x90,
	0x21, 0x7d, 0x24, 0x27, 0x9d, 0xa0, 0x10, 0xe1, 0xb4, 0x29, 0xd8, 0x9d, 0x10, 0x05, 0x1f, 0x83,
	0xff, 0xeb, 0x5b, 0xd4, 0x38, 0x60, 0xc2, 0x38, 0x7d, 0x4a, 0x93, 0x9c, 0xda, 0x26, 0x8c, 0x09,
	0x6d, 0xcb, 0x25, 0xa5, 0x92, 0xd2, 0x2e, 0x07, 0xd8, 0x0e, 0xf6, 0x9a, 0x09, 0x64, 0x2f, 0x01,
	0x84, 0xd7, 0x01, 0x1c, 0x12, 0xc6, 0xa9, 0x47, 0x0c, 0x64, 0xe9, 0xd8, 0xe1, 0x1e, 0xc1, 0x4c,
	0x5d, 0x91, 0xe2, 0xeb, 0x13, 0x4e, 0x2b, 0x60, 0xc0, 0xfb, 0xe0, 0xf2, 0x89, 0x93, 0xea, 0xc6,
	0x10, 0x39, 0x0e, 0xb6, 0xd4, 0x55, 0xb9, 0x94, 0xa2, 0x79, 0xc2, 0x9c, 0x8d, 0x00, 0x06, 0xcf,
	0x81, 0x05, 0x4e, 0x5d, 0x7d, 0x57, 0x5d, 0x2b, 0x29, 0x95, 0x15, 0x2d, 0xcd, 0xa9, 0xbb, 0x0b,
	0x3f, 0x02, 0xe7, 0x7d, 0x64, 0x11, 0x13, 0x71, 0xea, 0x31, 0xdd, 0xa5, 0xcf, 0xb1, 0xa7, 0x1b,
	0xc8, 0x55, 0xf3, 0x12, 0x03, 0x27, 0xbc, 0x8e, 0x60, 0x35, 0x90, 0x0b, 0xaf, 0x82, 0xf5, 0x98,
	0xaa, 0x33, 0xcc, 0x25, 0x7c, 0x5d, 0xc2, 0xd7, 0x62, 0x46, 0x17, 0x73, 0x81, 0xdd, 0x02, 0x59,
	0x64, 0x59, 0xf4, 0xb9, 0x45, 0x18, 0x57, 0x61, 0x29, 0x55, 0xc9, 0x6a, 0x13, 0x02, 0xdc, 0x04,
	0x19, 0x13, 0x3b, 0x63, 0xc9, 0x3c, 0x27, 0x99, 0xf1, 0x18, 0x5e, 0x02, 0x59, 0x5b, 0xe4, 0x58,
	0x8e, 0x0e, 0xb0, 0x7a, 0xbe, 0xa4, 0x54, 0xd2, 0x5a, 0xc6, 0x26, 0x4e, 0x57, 0x8c, 0x61, 0x15,
	0x9c, 0x93, 0x5a, 0x74, 0xe2, 0x88, 0x73, 0xf2, 0xb1, 0xee, 0x23, 0x8b, 0xa9, 0xef, 0x95, 0x94,
	0x4a, 0x46, 0x5b, 0x97, 0xac, 0x76, 0xc8, 0xd9, 0x43, 0x16, 0xbb, 0x59, 0xf9, 0xec, 0xcb, 0xe2,
	0xdc, 0x17, 0x5f, 0x16, 0xe7, 0xfe, 0xfc, 0xfb, 0xeb, 0x9b, 0x61, 0xfa, 0x19, 0x50, 0xbf, 0x1a,
	0xa6, 0xaa, 0x6a, 0x83, 0x3a, 0x1c, 0x3b, 0x5c, 0x55, 0xca, 0x7f, 0x55, 0xc0, 0xc5, 0x46, 0xec,
	0x12, 0x36, 0xf5, 0x91, 0xf5, 0x2e, 0x53, 0x4f, 0x1d, 0x64, 0x99, 0x38, 0x13, 0x19, 0xec, 0xe9,
	0x37, 0x08, 0xf6, 0x8c, 0x10, 0x13, 0x8c, 0x9b, 0xa5, 0xd7, 0xae, 0xe9, 0xdf, 0xf3, 0x60, 0x2b,
	0x5a, 0xd3, 0x23, 0x6a, 0x92, 0x7d, 0x62, 0xa0, 0x77, 0x9d, 0x53, 0x63, 0x5f, 0x4b, 0xcf, 0xe0,
	0x6b, 0x0b, 0x6f, 0xe6, 0x6b, 0x8b, 0x33, 0xf8, 0xda, 0xd2, 0x69, 0xbe, 0x96, 0x39, 0xcd, 0xd7,
	0xb2, 0xb3, 0xf9, 0x1a, 0x38, 0xc9, 0xd7, 0xe6, 0x55, 0xa5, 0xfc, 0x2b, 0x05, 0x9c, 0x6f, 0x3d,
	0x1b, 0x11, 0x9f, 0x9e, 0xd1, 0x4e, 0x3f, 0x00, 0x2b, 0x38, 0xa1, 0x8f, 0xa9, 0xa9, 0x52, 0xaa,
	0x92, 0xdb, 0xb9, 0x52, 0x0d, 0x0f, 0x3e, 0xae, 0xc7, 0xd1, 0xe9, 0x27, 0x67, 0xd7, 0xa6, 0x65,
	0xa5, 0x85, 0x7f, 0x54, 0xc0, 0xa6, 0xc8, 0x0b, 0x03, 0xac, 0xe1, 0xe7, 0xc8, 0x33, 0x9b, 0xd8,
	0xa1, 0x36, 0x7b, 0x6b, 0x3b, 0xcb, 0x60, 0xc5, 0x94, 0x9a, 0x74, 0x4e, 0x75, 0x64, 0x9a, 0xd2,
	0x4e, 0x89, 0x11, 0xc4, 0x1e, 0xad, 0x9b, 0x26, 0xac, 0x80, 0xfc, 0x04, 0xe3, 0x89, 0x18, 0x13,
	0xae, 0x2f, 0x60, 0xab, 0x11, 0x4c, 0x46, 0x1e, 0xbe, 0x59, 0x38, 0xdd, 0xb5, 0xcb, 0xff, 0x54,
	0x40, 0xfe, 0xae, 0x45, 0xfb, 0xc8, 0xea, 0x5a, 0x88, 0x0d, 0x45, 0xce, 0x1c, 0x8b, 0x90, 0xf2,
	0x70, 0x58, 0xac, 0xa4, 0xf9, 0x33, 0x87, 0x94, 0x10, 0x93, 0xe5, 0xf3, 0x16, 0x58, 0x8f, 0xcb,
	0x47, 0xec, 0xe0, 0x72, 0xb5, 0xb7, 0xcf, 0xbd, 0xfc, 0xa6, 0xb8, 0x16, 0x05, 0x53, 0x43, 0x3a,
	0x7b, 0x53, 0x5b, 0x33, 0xa6, 0x08, 0x26, 0x2c, 0x80, 0x1c, 0xe9, 0x1b, 0x3a, 0xc3, 0xcf, 0x74,
	0x67, 0x64, 0xcb, 0xd8, 0x48, 0x6b, 0x59, 0xd2, 0x37, 0xba, 0xf8, 0xd9, 0xee, 0xc8, 0x86, 0x1f,
	0x83, 0x0b, 0x51, 0x53, 0x29, 0xbc, 0x49, 0x17, 0xf2, 0x62, 0xbb, 0x3c, 0x19, 0x2e, 0xcb, 0xda,
	0xb9, 0x88, 0xbb, 0x87, 0x2c, 0x31, 0x59, 0xdd, 0x34, 0xbd, 0xf2, 0xbf, 0x16, 0xc0, 0x62, 0x07,
	0x79, 0xc8, 0x66, 0xb0, 0x07, 0xd6, 0x38, 0xb6, 0x5d, 0x0b, 0x71, 0xac, 0x07, 0xad, 0x49, 0xb8,
	0xd2, 0x6b, 0xb2, 0x65, 0x49, 0x36, 0x80, 0xd5, 0x44, 0xcb, 0xe7, 0x6f, 0x57, 0x1b, 0x92, 0xda,
	0xe5, 0x88, 0x63, 0x6d, 0x35, 0xd2, 0x11, 0x10, 0xe1, 0x0d, 0xa0, 0x72, 0x6f, 0xc4, 0xf8, 0xa4,
	0x69, 0x98, 0x54, 0xcb, 0xe0, 0xac, 0x2f, 0x44, 0xfc, 0xa0, 0xce, 0xc6, 0x55, 0xf2, 0xf8, 0xfe,
	0x20, 0xf5, 0x36, 0xfd, 0x81, 0x09, 0xb6, 0x98, 0x38, 0x54, 0xdd, 0xc6, 0x5c, 0x56, 0x71, 0xd7,
	0xc2, 0x0e, 0x61, 0xc3, 0x48, 0xf9, 0xe2, 0xec, 0xca, 0x37, 0xa4, 0xa2, 0x47, 0x42, 0x8f, 0x16,
	0xa9, 0x09, 0x67, 0x69, 0x80, 0xc2, 0xf1, 0xb3, 0xc4, 0x0b, 0x5f, 0x92, 0x0b, 0xbf, 0x74, 0x8c,
	0x8a, 0x78, 0xf5, 0x0c, 0x7c, 0x98, 0xe8, 0x36, 0x44, 0x34, 0xe9, 0xd2, 0x91, 0x75, 0x0f, 0x0f,
	0x44, 0x49, 0x46, 0x41, 0xe3, 0x81, 0x71, 0xdc, 0x31, 0x85, 0x3e, 0x2d, 0xda, 0xe5, 0x84, 0x53,
	0x13, 0x27, 0x6c, 0x2b, 0xcb, 0x93, 0xa6, 0x24, 0x8e, 0x4d, 0x2d, 0xa1, 0xeb, 0x0e, 0xc6, 0x22,
	0x8a, 0x12, 0x8d, 0x09, 0x76, 0xa9, 0x31, 0x94, 0x39, 0x29, 0xa5, 0xad, 0xc6, 0x4d, 0x48, 0x4b,
	0x50, 0xe1, 0x53, 0x70, 0xcd, 0x19, 0xd9, 0x7d, 0xec, 0xe9, 0x74, 0x3f, 0x00, 0xca, 0xc8, 0x63,
	0x1c, 0x79, 0x5c, 0xf7, 0xb0, 0x81, 0x89, 0x2f, 0x4e, 0x3c, 0xb0, 0x9c, 0xc9, 0xbe, 0x28, 0xa5,
	0x5d, 0x09, 0x44, 0x1e, 0xef, 0x4b, 0x1d, 0xac, 0x47, 0xbb, 0x02, 0xae, 0x45, 0xe8, 0xc0, 0x30,
	0x06, 0xdb, 0xe0, 0xb2, 0x8d, 0x5e, 0xe8, 0xb1, 0x33, 0x0b, 0xc3, 0xb1, 0xc3, 0x46, 0x4c, 0x9f,
	0x24, 0xf3, 0xb0, 0x37, 0x2a, 0xd8, 0xe8, 0x45, 0x27, 0xc4, 0x35, 0x22, 0xd8, 0x5e, 0x8c, 0xba,
	0x9f, 0xce, 0xa4, 0xf3, 0x0b, 0xf7, 0xd3, 0x99, 0x85, 0xfc, 0xe2, 0xfd, 0x74, 0x26, 0x93, 0xcf,
	0x96, 0xff, 0x1f, 0x64, 0x65, 0x5c, 0xd7, 0x8d, 0x03, 0x26, 0xb3, 0xbb, 0x69, 0x7a, 0x98, 0x31,
	0xcc, 0x54, 0x25, 0xcc, 0xee, 0x11, 0xa1, 0xcc, 0xc1, 0xc6, 0x49, 0x37, 0x06, 0x06, 0x3f, 0x05,
	0x4b, 0x2e, 0x96, 0xed, 0xac, 0x14, 0xcc, 0xed, 0x7c, 0x52, 0x9d, 0xe1, 0xaa, 0x57, 0x3d, 0x49,
	0xa1, 0x16, 0x69, 0x2b, 0x7b, 0x93, 0x7b, 0xca, 0xa1, 0x5e, 0x81, 0xc1, 0xbd, 0xc3, 0x93, 0x7e,
	0xff, 0x8d, 0x26, 0x3d, 0xa4, 0x6f, 0x32, 0xe7, 0x35, 0x90, 0xab, 0x07, 0xcb, 0x7e, 0x28, 0x4a,
	0xd7, 0x91, 0x6d, 0x59, 0x4e, 0x6e, 0xcb, 0x2e, 0x58, 0x0d, 0x9b, 0xbf, 0x1e, 0x95, 0xb9, 0x09,
	0xbe, 0x0f, 0x40, 0xd8, 0x35, 0x8a, 0x9c, 0x16, 0x64, 0xf7, 0x6c, 0x48, 0x69, 0x9b, 0x53, 0x15,
	0x7d, 0x7e, 0xaa, 0xa2, 0xcb, 0xaa, 0x41, 0xc1, 0xc6, 0x5e, 0xb2, 0xea, 0xca, 0x02, 0xd2, 0x41,
	0xc6, 0x01, 0xe6, 0x0c, 0x6a, 0x20, 0x2d, 0xab, 0x6b, 0xb0, 0xdc, 0x1b, 0x27, 0x2e, 0xd7, 0xdf,
	0xae, 0x9e, 0xa4, 0xa4, 0x89, 0x38, 0x0a, 0x63, 0x40, 0xea, 0x2a, 0xff, 0x5c, 0x01, 0xea, 0x03,
	0x3c, 0xae, 0x33, 0x46, 0x06, 0x8e, 0x8d, 0x1d, 0x2e, 0xa2, 0x0f, 0x19, 0x58, 0x7c, 0xc2, 0x0f,
	0xc0, 0x4a, 0xec, 0x78, 0x32, 0x79, 0x2a, 0x32, 0x79, 0x2e, 0x47, 0x44, 0xb1, 0x4f, 0xf0, 0x26,
	0x00, 0xae, 0x87, 0x7d, 0xdd, 0xd0, 0x0f, 0xf0, 0x58, 0xae, 0x29, 0xb7, 0xb3, 0x95, 0x4c, 0x8a,
	0xc1, 0xad, 0xb7, 0xda, 0x19, 0xf5, 0x2d, 0x62, 0x3c, 0xc0, 0x63, 0x2d, 0x23, 0xf0, 0x8d, 0x07,
	0x78, 0x2c, 0xaa, 0xa0, 0x6c, 0x52, 0x64, 0x26, 0x4b, 0x69, 0xc1, 0xa0, 0xfc, 0x4b, 0x05, 0x5c,
	0x8c, 0x17, 0x10, 0x9d, 0x57, 0x67, 0xd4, 0x17, 0x12, 0xc9, 0xfd, 0x53, 0xa6, 0x3b, 0xa2, 0x23,
	0xd6, 0xce, 0x1f, 0x63, 0xed, 0x2d, 0xb0, 0x1c, 0xa7, 0x12, 0x61, 0x6f, 0x6a, 0x06, 0x7b, 0x73,
	0x91, 0xc4, 0x03, 0x3c, 0x2e, 0xff, 0x24, 0x61, 0xdb, 0xed, 0x71, 0xc2, 0x85, 0xbd, 0xd7, 0xd8,
	0x16, 0x4f, 0x9b, 0xb4, 0xcd, 0x48, 0xca, 0x1f, 0x59, 0x40, 0xea, 0xe8, 0x02, 0xca, 0x7f, 0x51,
	0xc0, 0x85, 0xe4, 0xac, 0xac, 0x47, 0x3b, 0xde, 0xc8, 0xc1, 0x7b, 0x3b, 0xa7, 0xcd, 0x7f, 0x0b,
	0x64, 0x5c, 0x81, 0xd2, 0x39, 0x0b, 0x8f, 0x68, 0xb6, 0x92, 0xbd, 0x24, 0xa5, 0x7a, 0x22, 0xc4,
	0x57, 0xa7, 0x16, 0xc0, 0xc2, 0x9d, 0xfb, 0x68, 0xa6, 0xa0, 0x4b, 0x04, 0x94, 0xb6, 0x92, 0x5c,
	0x33, 0x2b, 0xff, 0x41, 0x01, 0xf0, 0x68, 0xb6, 0x82, 0xdf, 0x01, 0x70, 0x2a, 0xe7, 0x25, 0xfd,
	0x2f, 0xef, 0x26, 0xb2, 0x9c, 0xdc, 0xb9, 0xd8, 0x8f, 0xe6, 0x13, 0x7e, 0x04, 0xbf, 0x07, 0x80,
	0x2b, 0x0f, 0x71, 0xe6, 0x93, 0xce, 0xba, 0xd1, 0x27, 0x2c, 0x82, 0xdc, 0x8f, 0x28, 0x71, 0x92,
	0x0f, 0x16, 0x29, 0x0d, 0x08, 0x52, 0xf0, 0x16, 0x51, 0xfe, 0x99, 0x32, 0x49, 0x89, 0x61, 0xb6,
	0xae, 0x5b, 0x56, 0xd8, 0x03, 0x42, 0x17, 0x2c, 0x45, 0xf9, 0x3e, 0x08, 0xd7, 0xad, 0x63, 0x6b,
	0x52, 0x13, 0x1b, 0xb2, 0x2c, 0xdd, 0x10, 0x3b, 0xfe, 0xdb, 0x6f, 0x8b, 0xd7, 0x06, 0x84, 0x0f,
	0x47, 0xfd, 0xaa, 0x41, 0xed, 0xf0, 0x15, 0x27, 0xfc, 0x77, 0x9d, 0x99, 0x07, 0x35, 0x3e, 0x76,
	0x31, 0x8b, 0x64, 0xd8, 0x6f, 0xfe, 0xf1, 0xbb, 0xab, 0x8a, 0x16, 0x4d, 0x53, 0x36, 0x41, 0x3e,
	0xbe, 0x83, 0x60, 0x8e, 0x4c, 0xc4, 0x11, 0x84, 0x20, 0xed, 0x20, 0x3b, 0x6a, 0x32, 0xe5, 0xf7,
	0x0c, 0x3d, 0xe6, 0x26, 0xc8, 0xd8, 0xa1, 0x86, 0xf0, 0xd6, 0x11, 0x8f, 0xcb, 0x3f, 0x5d, 0x04,
	0xa5, 0x68, 0x9a, 0x76, 0xf0, 0x36, 0x43, 0x7e, 0x1c, 0xb4, 0xe0, 0xa2, 0x73, 0x12, 0xf5, 0x9b,
	0x1d, 0xf3, 0xde, 0xa3, 0x9c, 0xcd, 0x7b, 0xcf, 0xfc, 0x6b, 0xdf, 0x7b, 0x52, 0xaf, 0x79, 0xef,
	0x49, 0x9f, 0xdd, 0x7b, 0xcf, 0xc2, 0x99, 0xbf, 0xf7, 0x2c, 0xbe, 0xa3, 0xf7, 0x9e, 0xa5, 0xff,
	0xc9, 0x7b, 0x4f, 0xe6, 0x4c, 0xdf, 0x7b, 0xb2, 0x6f, 0xf7, 0xde, 0x03, 0xde, 0xea, 0xbd, 0x27,
	0x37, 0xd3, 0x7b, 0x4f, 0xf9, 0x17, 0xf3, 0xe0, 0x82, 0xbc, 0x49, 0x77, 0x87, 0xc8, 0x15, 0x87,
	0x3b, 0x09, 0x81, 0xf8, 0x7a, 0xae, 0xcc, 0x70, 0x3d, 0x9f, 0x7f, 0xb3, 0xeb, 0x79, 0x6a, 0x86,
	0xeb, 0x79, 0xfa, 0xb4, 0xeb, 0xf9, 0xc2, 0x69, 0xd7, 0xf3, 0xc5, 0xd9, 0xae, 0xe7, 0x4b, 0x27,
	0x5c, 0xcf, 0xcb, 0x45, 0x90, 0x8b, 0x13, 0x84, 0xc9, 0x60, 0x1e, 0xa4, 0x88, 0x19, 0x35, 0x94,
	0xe2, 0xf3, 0xea, 0x9f, 0x14, 0xb0, 0x12, 0x57, 0xf5, 0x21, 0x62, 0x18, 0x16, 0xc0, 0x66, 0xe3,
	0xf1, 0x6e, 0xf7, 0xc9, 0xa3, 0x96, 0xa6, 0x77, 0xee, 0xd5, 0xbb, 0x2d, 0xfd, 0xc9, 0x6e, 0xb7,
	0xd3, 0x6a, 0xb4, 0xef, 0xb4, 0x5b, 0xcd, 0xfc, 0x1c, 0x7c, 0x1f, 0x6c, 0x1c, 0xe2, 0x6b, 0xad,
	0xbb, 0xed, 0x6e, 0xaf, 0xa5, 0xb5, 0x9a, 0x79, 0xe5, 0x18, 0xf1, 0xf6, 0x6e, 0xbb, 0xd7, 0xae,
	0x3f, 0x6c, 0x3f, 0x6d, 0x35, 0xf3, 0xf3, 0xf0, 0x12, 0xb8, 0x78, 0x88, 0xff, 0xb0, 0xfe, 0x64,
	0xb7, 0x71, 0xaf, 0xd5, 0xcc, 0xa7, 0xe0, 0x26, 0xb8, 0x70, 0x88, 0xd9, 0xed, 0x3d, 0xee, 0x74,
	0x5a, 0xcd, 0x7c, 0xfa, 0x18, 0x5e, 0xb3, 0xf5, 0xb0, 0xd5, 0x6b, 0x35, 0xf3, 0x0b, 0x9b, 0xe9,
	0xcf, 0x7e, 0x5d, 0x98, 0xbb, 0xfd, 0xe9, 0x57, 0x2f, 0x0b, 0xca, 0xd7, 0x2f, 0x0b, 0xca, 0xdf,
	0x5f, 0x16, 0x94, 0xcf, 0x5f, 0x15, 0xe6, 0xbe, 0x7e, 0x55, 0x98, 0xfb, 0xdb, 0xab, 0xc2, 0xdc,
	0xd3, 0x4f, 0x8e, 0x66, 0xf2, 0x49, 0xa5, 0xbc, 0x1e, 0xff, 0xb2, 0xe1, 0x7f, 0xb7, 0xf6, 0x62,
	0xfa, 0x77, 0x13, 0x99, 0xe4, 0xfb, 0x8b, 0x32, 0x48, 0x3f, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0x0f, 0x93, 0x6a, 0x68, 0x19, 0x00, 0x00,
}

func (m *ConsumerAdditionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAdditionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAdditionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowInactiveVals {
		i--
		if m.AllowInactiveVals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.MinStake != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Denylist) > 0 {
		for iNdEx := len(m.Denylist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denylist[iNdEx])
			copy(dAtA[i:], m.Denylist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Denylist[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Allowlist) > 0 {
		for iNdEx := len(m.Allowlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allowlist[iNdEx])
			copy(dAtA[i:], m.Allowlist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Allowlist[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.ValidatorSetCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorSetCap))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ValidatorsPowerCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorsPowerCap))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Top_N != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.Top_N))
		i--
		dAtA[i] = 0x78
	}
	if len(m.DistributionTransmissionChannel) > 0 {
		i -= len(m.DistributionTransmissionChannel)
		copy(dAtA[i:], m.DistributionTransmissionChannel)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.DistributionTransmissionChannel)))
		i--
		dAtA[i] = 0x72
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x68
	}
	if m.BlocksPerDistributionTransmission != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.BlocksPerDistributionTransmission))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ConsumerRedistributionFraction) > 0 {
		i -= len(m.ConsumerRedistributionFraction)
		copy(dAtA[i:], m.ConsumerRedistributionFraction)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ConsumerRedistributionFraction)))
		i--
		dAtA[i] = 0x5a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TransferTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProvider(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.CcvTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintProvider(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintProvider(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.SpawnTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintProvider(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	if len(m.BinaryHash) > 0 {
		i -= len(m.BinaryHash)
		copy(dAtA[i:], m.BinaryHash)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.BinaryHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.InitialHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerRemovalProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRemovalProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerRemovalProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StopTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StopTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintProvider(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerModificationProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerModificationProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerModificationProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowInactiveVals {
		i--
		if m.AllowInactiveVals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.MinStake != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Denylist) > 0 {
		for iNdEx := len(m.Denylist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denylist[iNdEx])
			copy(dAtA[i:], m.Denylist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Denylist[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Allowlist) > 0 {
		for iNdEx := len(m.Allowlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allowlist[iNdEx])
			copy(dAtA[i:], m.Allowlist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Allowlist[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ValidatorSetCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorSetCap))
		i--
		dAtA[i] = 0x30
	}
	if m.ValidatorsPowerCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorsPowerCap))
		i--
		dAtA[i] = 0x28
	}
	if m.Top_N != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.Top_N))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquivocationProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquivocationProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquivocationProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equivocations) > 0 {
		for iNdEx := len(m.Equivocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeRewardDenomsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeRewardDenomsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeRewardDenomsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomsToRemove) > 0 {
		for iNdEx := len(m.DenomsToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DenomsToRemove[iNdEx])
			copy(dAtA[i:], m.DenomsToRemove[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.DenomsToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DenomsToAdd) > 0 {
		for iNdEx := len(m.DenomsToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DenomsToAdd[iNdEx])
			copy(dAtA[i:], m.DenomsToAdd[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.DenomsToAdd[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSlashEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSlashEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSlashEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderValConsAddr) > 0 {
		i -= len(m.ProviderValConsAddr)
		copy(dAtA[i:], m.ProviderValConsAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ProviderValConsAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.IbcSeqNum != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.IbcSeqNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsumerChainID) > 0 {
		i -= len(m.ConsumerChainID)
		copy(dAtA[i:], m.ConsumerChainID)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ConsumerChainID)))
		i--
		dAtA[i] = 0x12
	}
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RecvTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RecvTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintProvider(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxProviderConsensusValidators != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.MaxProviderConsensusValidators))
		i--
		dAtA[i] = 0x60
	}
	if m.NumberOfEpochsToStartReceivingRewards != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.NumberOfEpochsToStartReceivingRewards))
		i--
		dAtA[i] = 0x58
	}
	if m.BlocksPerEpoch != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.BlocksPerEpoch))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.ConsumerRewardDenomRegistrationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.SlashMeterReplenishFraction) > 0 {
		i -= len(m.SlashMeterReplenishFraction)
		copy(dAtA[i:], m.SlashMeterReplenishFraction)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.SlashMeterReplenishFraction)))
		i--
		dAtA[i] = 0x3a
	}
	n9, err9 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.SlashMeterReplenishPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SlashMeterReplenishPeriod):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintProvider(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x32
	n10, err10 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.CcvTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintProvider(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x1a
	if len(m.TrustingPeriodFraction) > 0 {
		i -= len(m.TrustingPeriodFraction)
		copy(dAtA[i:], m.TrustingPeriodFraction)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.TrustingPeriodFraction)))
		i--
		dAtA[i] = 0x12
	}
	if m.TemplateClient != nil {
		{
			size, err := m.TemplateClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProvider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlashAcks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashAcks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashAcks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerAdditionProposals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAdditionProposals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAdditionProposals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for iNdEx := len(m.Pending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerRemovalProposals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRemovalProposals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerRemovalProposals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for iNdEx := len(m.Pending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChannelToChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelToChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelToChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetChangePackets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChangePackets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChangePackets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyAssignmentReplacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyAssignmentReplacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyAssignmentReplacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevCKey != nil {
		{
			size, err := m.PrevCKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProvider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderAddr) > 0 {
		i -= len(m.ProviderAddr)
		copy(dAtA[i:], m.ProviderAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ProviderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorConsumerPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorConsumerPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorConsumerPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsumerKey != nil {
		{
			size, err := m.ConsumerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProvider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderAddr) > 0 {
		i -= len(m.ProviderAddr)
		copy(dAtA[i:], m.ProviderAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ProviderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorByConsumerAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorByConsumerAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorByConsumerAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderAddr) > 0 {
		i -= len(m.ProviderAddr)
		copy(dAtA[i:], m.ProviderAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ProviderAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerAddr) > 0 {
		i -= len(m.ConsumerAddr)
		copy(dAtA[i:], m.ConsumerAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ConsumerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerAddrsToPruneV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAddrsToPruneV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAddrsToPruneV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsumerAddrs != nil {
		{
			size, err := m.ConsumerAddrs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProvider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	n15, err15 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PruneTs, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PruneTs):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintProvider(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinHeight != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.JoinHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProvider(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProviderConsAddr) > 0 {
		i -= len(m.ProviderConsAddr)
		copy(dAtA[i:], m.ProviderConsAddr)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ProviderConsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerRewardsAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRewardsAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerRewardsAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerInitializationParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerInitializationParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerInitializationParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionTransmissionChannel) > 0 {
		i -= len(m.DistributionTransmissionChannel)
		copy(dAtA[i:], m.DistributionTransmissionChannel)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.DistributionTransmissionChannel)))
		i--
		dAtA[i] = 0x5a
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x50
	}
	if m.BlocksPerDistributionTransmission != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.BlocksPerDistributionTransmission))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ConsumerRedistributionFraction) > 0 {
		i -= len(m.ConsumerRedistributionFraction)
		copy(dAtA[i:], m.ConsumerRedistributionFraction)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.ConsumerRedistributionFraction)))
		i--
		dAtA[i] = 0x42
	}
	n17, err17 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TransferTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintProvider(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x3a
	n18, err18 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.CcvTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintProvider(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x32
	n19, err19 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintProvider(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x2a
	n20, err20 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.SpawnTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintProvider(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x22
	if len(m.BinaryHash) > 0 {
		i -= len(m.BinaryHash)
		copy(dAtA[i:], m.BinaryHash)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.BinaryHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintProvider(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.InitialHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PowerShapingParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerShapingParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerShapingParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowInactiveVals {
		i--
		if m.AllowInactiveVals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MinStake != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Denylist) > 0 {
		for iNdEx := len(m.Denylist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denylist[iNdEx])
			copy(dAtA[i:], m.Denylist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Denylist[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Allowlist) > 0 {
		for iNdEx := len(m.Allowlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allowlist[iNdEx])
			copy(dAtA[i:], m.Allowlist[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Allowlist[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ValidatorSetCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorSetCap))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidatorsPowerCap != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.ValidatorsPowerCap))
		i--
		dAtA[i] = 0x10
	}
	if m.Top_N != 0 {
		i = encodeVarintProvider(dAtA, i, uint64(m.Top_N))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintProvider(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProvider(dAtA []byte, offset int, v uint64) int {
	offset -= sovProvider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsumerAdditionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = m.InitialHeight.Size()
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.BinaryHash)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.ConsumerRedistributionFraction)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.BlocksPerDistributionTransmission != 0 {
		n += 1 + sovProvider(uint64(m.BlocksPerDistributionTransmission))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovProvider(uint64(m.HistoricalEntries))
	}
	l = len(m.DistributionTransmissionChannel)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.Top_N != 0 {
		n += 1 + sovProvider(uint64(m.Top_N))
	}
	if m.ValidatorsPowerCap != 0 {
		n += 2 + sovProvider(uint64(m.ValidatorsPowerCap))
	}
	if m.ValidatorSetCap != 0 {
		n += 2 + sovProvider(uint64(m.ValidatorSetCap))
	}
	if len(m.Allowlist) > 0 {
		for _, s := range m.Allowlist {
			l = len(s)
			n += 2 + l + sovProvider(uint64(l))
		}
	}
	if len(m.Denylist) > 0 {
		for _, s := range m.Denylist {
			l = len(s)
			n += 2 + l + sovProvider(uint64(l))
		}
	}
	if m.MinStake != 0 {
		n += 2 + sovProvider(uint64(m.MinStake))
	}
	if m.AllowInactiveVals {
		n += 3
	}
	return n
}

func (m *ConsumerRemovalProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StopTime)
	n += 1 + l + sovProvider(uint64(l))
	return n
}

func (m *ConsumerModificationProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.Top_N != 0 {
		n += 1 + sovProvider(uint64(m.Top_N))
	}
	if m.ValidatorsPowerCap != 0 {
		n += 1 + sovProvider(uint64(m.ValidatorsPowerCap))
	}
	if m.ValidatorSetCap != 0 {
		n += 1 + sovProvider(uint64(m.ValidatorSetCap))
	}
	if len(m.Allowlist) > 0 {
		for _, s := range m.Allowlist {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	if len(m.Denylist) > 0 {
		for _, s := range m.Denylist {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	if m.MinStake != 0 {
		n += 1 + sovProvider(uint64(m.MinStake))
	}
	if m.AllowInactiveVals {
		n += 2
	}
	return n
}

func (m *EquivocationProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if len(m.Equivocations) > 0 {
		for _, e := range m.Equivocations {
			l = e.Size()
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *ChangeRewardDenomsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if len(m.DenomsToAdd) > 0 {
		for _, s := range m.DenomsToAdd {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	if len(m.DenomsToRemove) > 0 {
		for _, s := range m.DenomsToRemove {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *GlobalSlashEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RecvTime)
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.ConsumerChainID)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.IbcSeqNum != 0 {
		n += 1 + sovProvider(uint64(m.IbcSeqNum))
	}
	l = len(m.ProviderValConsAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TemplateClient != nil {
		l = m.TemplateClient.Size()
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.TrustingPeriodFraction)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.SlashMeterReplenishPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.SlashMeterReplenishFraction)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = m.ConsumerRewardDenomRegistrationFee.Size()
	n += 1 + l + sovProvider(uint64(l))
	if m.BlocksPerEpoch != 0 {
		n += 1 + sovProvider(uint64(m.BlocksPerEpoch))
	}
	if m.NumberOfEpochsToStartReceivingRewards != 0 {
		n += 1 + sovProvider(uint64(m.NumberOfEpochsToStartReceivingRewards))
	}
	if m.MaxProviderConsensusValidators != 0 {
		n += 1 + sovProvider(uint64(m.MaxProviderConsensusValidators))
	}
	return n
}

func (m *SlashAcks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *ConsumerAdditionProposals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for _, e := range m.Pending {
			l = e.Size()
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *ConsumerRemovalProposals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for _, e := range m.Pending {
			l = e.Size()
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *AddressList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *ChannelToChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *ValidatorSetChangePackets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *KeyAssignmentReplacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.PrevCKey != nil {
		l = m.PrevCKey.Size()
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovProvider(uint64(m.Power))
	}
	return n
}

func (m *ValidatorConsumerPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ProviderAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.ConsumerKey != nil {
		l = m.ConsumerKey.Size()
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *ValidatorByConsumerAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ConsumerAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.ProviderAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *ConsumerAddrsToPruneV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PruneTs)
	n += 1 + l + sovProvider(uint64(l))
	if m.ConsumerAddrs != nil {
		l = m.ConsumerAddrs.Size()
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *ConsensusValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderConsAddr)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovProvider(uint64(m.Power))
	}
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.JoinHeight != 0 {
		n += 1 + sovProvider(uint64(m.JoinHeight))
	}
	return n
}

func (m *ConsumerRewardsAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func (m *ConsumerMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *ConsumerInitializationParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InitialHeight.Size()
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = len(m.BinaryHash)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CcvTimeoutPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod)
	n += 1 + l + sovProvider(uint64(l))
	l = len(m.ConsumerRedistributionFraction)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	if m.BlocksPerDistributionTransmission != 0 {
		n += 1 + sovProvider(uint64(m.BlocksPerDistributionTransmission))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovProvider(uint64(m.HistoricalEntries))
	}
	l = len(m.DistributionTransmissionChannel)
	if l > 0 {
		n += 1 + l + sovProvider(uint64(l))
	}
	return n
}

func (m *PowerShapingParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Top_N != 0 {
		n += 1 + sovProvider(uint64(m.Top_N))
	}
	if m.ValidatorsPowerCap != 0 {
		n += 1 + sovProvider(uint64(m.ValidatorsPowerCap))
	}
	if m.ValidatorSetCap != 0 {
		n += 1 + sovProvider(uint64(m.ValidatorSetCap))
	}
	if len(m.Allowlist) > 0 {
		for _, s := range m.Allowlist {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	if len(m.Denylist) > 0 {
		for _, s := range m.Denylist {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	if m.MinStake != 0 {
		n += 1 + sovProvider(uint64(m.MinStake))
	}
	if m.AllowInactiveVals {
		n += 2
	}
	return n
}

func (m *ConsumerIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovProvider(uint64(l))
		}
	}
	return n
}

func sovProvider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProvider(x uint64) (n int) {
	return sovProvider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsumerAdditionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAdditionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAdditionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryHash = append(m.BinaryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryHash == nil {
				m.BinaryHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.SpawnTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcvTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.CcvTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TransferTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRedistributionFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRedistributionFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerDistributionTransmission", wireType)
			}
			m.BlocksPerDistributionTransmission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerDistributionTransmission |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTransmissionChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionTransmissionChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top_N", wireType)
			}
			m.Top_N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top_N |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPowerCap", wireType)
			}
			m.ValidatorsPowerCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsPowerCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetCap", wireType)
			}
			m.ValidatorSetCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allowlist = append(m.Allowlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denylist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denylist = append(m.Denylist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowInactiveVals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowInactiveVals = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRemovalProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRemovalProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRemovalProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StopTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerModificationProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerModificationProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerModificationProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top_N", wireType)
			}
			m.Top_N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top_N |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPowerCap", wireType)
			}
			m.ValidatorsPowerCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsPowerCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetCap", wireType)
			}
			m.ValidatorSetCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allowlist = append(m.Allowlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denylist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denylist = append(m.Denylist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowInactiveVals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowInactiveVals = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquivocationProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquivocationProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquivocationProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivocations = append(m.Equivocations, &types1.Equivocation{})
			if err := m.Equivocations[len(m.Equivocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeRewardDenomsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeRewardDenomsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeRewardDenomsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomsToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomsToAdd = append(m.DenomsToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomsToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomsToRemove = append(m.DenomsToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSlashEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSlashEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSlashEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RecvTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSeqNum", wireType)
			}
			m.IbcSeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcSeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderValConsAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderValConsAddr = append(m.ProviderValConsAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderValConsAddr == nil {
				m.ProviderValConsAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemplateClient == nil {
				m.TemplateClient = &_07_tendermint.ClientState{}
			}
			if err := m.TemplateClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustingPeriodFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustingPeriodFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcvTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.CcvTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashMeterReplenishPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.SlashMeterReplenishPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashMeterReplenishFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashMeterReplenishFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRewardDenomRegistrationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerRewardDenomRegistrationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerEpoch", wireType)
			}
			m.BlocksPerEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfEpochsToStartReceivingRewards", wireType)
			}
			m.NumberOfEpochsToStartReceivingRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfEpochsToStartReceivingRewards |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProviderConsensusValidators", wireType)
			}
			m.MaxProviderConsensusValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProviderConsensusValidators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashAcks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashAcks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashAcks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerAdditionProposals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAdditionProposals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAdditionProposals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pending = append(m.Pending, &ConsumerAdditionProposal{})
			if err := m.Pending[len(m.Pending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRemovalProposals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRemovalProposals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRemovalProposals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pending = append(m.Pending, &ConsumerRemovalProposal{})
			if err := m.Pending[len(m.Pending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelToChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelToChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelToChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetChangePackets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChangePackets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChangePackets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, types3.ValidatorSetChangePacketData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyAssignmentReplacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyAssignmentReplacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyAssignmentReplacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddr = append(m.ProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderAddr == nil {
				m.ProviderAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevCKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevCKey == nil {
				m.PrevCKey = &crypto.PublicKey{}
			}
			if err := m.PrevCKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorConsumerPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorConsumerPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorConsumerPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddr = append(m.ProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderAddr == nil {
				m.ProviderAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerKey == nil {
				m.ConsumerKey = &crypto.PublicKey{}
			}
			if err := m.ConsumerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorByConsumerAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorByConsumerAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorByConsumerAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddr = append(m.ConsumerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsumerAddr == nil {
				m.ConsumerAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddr = append(m.ProviderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderAddr == nil {
				m.ProviderAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerAddrsToPruneV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAddrsToPruneV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAddrsToPruneV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PruneTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PruneTs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerAddrs == nil {
				m.ConsumerAddrs = &AddressList{}
			}
			if err := m.ConsumerAddrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderConsAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderConsAddr = append(m.ProviderConsAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderConsAddr == nil {
				m.ProviderConsAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKey == nil {
				m.PublicKey = &crypto.PublicKey{}
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinHeight", wireType)
			}
			m.JoinHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRewardsAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRewardsAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRewardsAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types2.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerInitializationParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerInitializationParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerInitializationParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryHash = append(m.BinaryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryHash == nil {
				m.BinaryHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.SpawnTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcvTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.CcvTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TransferTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRedistributionFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRedistributionFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerDistributionTransmission", wireType)
			}
			m.BlocksPerDistributionTransmission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerDistributionTransmission |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTransmissionChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionTransmissionChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerShapingParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerShapingParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerShapingParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top_N", wireType)
			}
			m.Top_N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top_N |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPowerCap", wireType)
			}
			m.ValidatorsPowerCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsPowerCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetCap", wireType)
			}
			m.ValidatorSetCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetCap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allowlist = append(m.Allowlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denylist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denylist = append(m.Denylist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowInactiveVals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowInactiveVals = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProvider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProvider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProvider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProvider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProvider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProvider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProvider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProvider = fmt.Errorf("proto: unexpected end of group")
)
