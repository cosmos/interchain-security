// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/provider/v1/keymap.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Memo struct {
	Ck    *crypto.PublicKey `protobuf:"bytes,1,opt,name=ck,proto3" json:"ck,omitempty"`
	Pk    *crypto.PublicKey `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Cca   []byte            `protobuf:"bytes,3,opt,name=cca,proto3" json:"cca,omitempty"`
	Vscid uint64            `protobuf:"varint,4,opt,name=vscid,proto3" json:"vscid,omitempty"`
	Power int64             `protobuf:"varint,5,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Memo) Reset()         { *m = Memo{} }
func (m *Memo) String() string { return proto.CompactTextString(m) }
func (*Memo) ProtoMessage()    {}
func (*Memo) Descriptor() ([]byte, []int) {
	return fileDescriptor_864a04a770548246, []int{0}
}
func (m *Memo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Memo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Memo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Memo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memo.Merge(m, src)
}
func (m *Memo) XXX_Size() int {
	return m.Size()
}
func (m *Memo) XXX_DiscardUnknown() {
	xxx_messageInfo_Memo.DiscardUnknown(m)
}

var xxx_messageInfo_Memo proto.InternalMessageInfo

func (m *Memo) GetCk() *crypto.PublicKey {
	if m != nil {
		return m.Ck
	}
	return nil
}

func (m *Memo) GetPk() *crypto.PublicKey {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *Memo) GetCca() []byte {
	if m != nil {
		return m.Cca
	}
	return nil
}

func (m *Memo) GetVscid() uint64 {
	if m != nil {
		return m.Vscid
	}
	return 0
}

func (m *Memo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type KeyToKey struct {
	From *crypto.PublicKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *crypto.PublicKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *KeyToKey) Reset()         { *m = KeyToKey{} }
func (m *KeyToKey) String() string { return proto.CompactTextString(m) }
func (*KeyToKey) ProtoMessage()    {}
func (*KeyToKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_864a04a770548246, []int{1}
}
func (m *KeyToKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyToKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyToKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyToKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyToKey.Merge(m, src)
}
func (m *KeyToKey) XXX_Size() int {
	return m.Size()
}
func (m *KeyToKey) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyToKey.DiscardUnknown(m)
}

var xxx_messageInfo_KeyToKey proto.InternalMessageInfo

func (m *KeyToKey) GetFrom() *crypto.PublicKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *KeyToKey) GetTo() *crypto.PublicKey {
	if m != nil {
		return m.To
	}
	return nil
}

type KeyToMemo struct {
	Key  *crypto.PublicKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Memo *Memo             `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *KeyToMemo) Reset()         { *m = KeyToMemo{} }
func (m *KeyToMemo) String() string { return proto.CompactTextString(m) }
func (*KeyToMemo) ProtoMessage()    {}
func (*KeyToMemo) Descriptor() ([]byte, []int) {
	return fileDescriptor_864a04a770548246, []int{2}
}
func (m *KeyToMemo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyToMemo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyToMemo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyToMemo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyToMemo.Merge(m, src)
}
func (m *KeyToMemo) XXX_Size() int {
	return m.Size()
}
func (m *KeyToMemo) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyToMemo.DiscardUnknown(m)
}

var xxx_messageInfo_KeyToMemo proto.InternalMessageInfo

func (m *KeyToMemo) GetKey() *crypto.PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyToMemo) GetMemo() *Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

type ConsAddrToKey struct {
	ConsAddr []byte            `protobuf:"bytes,1,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	Key      *crypto.PublicKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ConsAddrToKey) Reset()         { *m = ConsAddrToKey{} }
func (m *ConsAddrToKey) String() string { return proto.CompactTextString(m) }
func (*ConsAddrToKey) ProtoMessage()    {}
func (*ConsAddrToKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_864a04a770548246, []int{3}
}
func (m *ConsAddrToKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsAddrToKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsAddrToKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsAddrToKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsAddrToKey.Merge(m, src)
}
func (m *ConsAddrToKey) XXX_Size() int {
	return m.Size()
}
func (m *ConsAddrToKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsAddrToKey.DiscardUnknown(m)
}

var xxx_messageInfo_ConsAddrToKey proto.InternalMessageInfo

func (m *ConsAddrToKey) GetConsAddr() []byte {
	if m != nil {
		return m.ConsAddr
	}
	return nil
}

func (m *ConsAddrToKey) GetKey() *crypto.PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type KeyMap struct {
	PkToCk   []KeyToKey      `protobuf:"bytes,1,rep,name=pk_to_ck,json=pkToCk,proto3" json:"pk_to_ck"`
	CkToPk   []KeyToKey      `protobuf:"bytes,2,rep,name=ck_to_pk,json=ckToPk,proto3" json:"ck_to_pk"`
	CkToMemo []KeyToMemo     `protobuf:"bytes,3,rep,name=ck_to_memo,json=ckToMemo,proto3" json:"ck_to_memo"`
	CcaToCk  []ConsAddrToKey `protobuf:"bytes,4,rep,name=cca_to_ck,json=ccaToCk,proto3" json:"cca_to_ck"`
}

func (m *KeyMap) Reset()         { *m = KeyMap{} }
func (m *KeyMap) String() string { return proto.CompactTextString(m) }
func (*KeyMap) ProtoMessage()    {}
func (*KeyMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_864a04a770548246, []int{4}
}
func (m *KeyMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyMap.Merge(m, src)
}
func (m *KeyMap) XXX_Size() int {
	return m.Size()
}
func (m *KeyMap) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyMap.DiscardUnknown(m)
}

var xxx_messageInfo_KeyMap proto.InternalMessageInfo

func (m *KeyMap) GetPkToCk() []KeyToKey {
	if m != nil {
		return m.PkToCk
	}
	return nil
}

func (m *KeyMap) GetCkToPk() []KeyToKey {
	if m != nil {
		return m.CkToPk
	}
	return nil
}

func (m *KeyMap) GetCkToMemo() []KeyToMemo {
	if m != nil {
		return m.CkToMemo
	}
	return nil
}

func (m *KeyMap) GetCcaToCk() []ConsAddrToKey {
	if m != nil {
		return m.CcaToCk
	}
	return nil
}

func init() {
	proto.RegisterType((*Memo)(nil), "interchain_security.ccv.provider.v1.Memo")
	proto.RegisterType((*KeyToKey)(nil), "interchain_security.ccv.provider.v1.KeyToKey")
	proto.RegisterType((*KeyToMemo)(nil), "interchain_security.ccv.provider.v1.KeyToMemo")
	proto.RegisterType((*ConsAddrToKey)(nil), "interchain_security.ccv.provider.v1.ConsAddrToKey")
	proto.RegisterType((*KeyMap)(nil), "interchain_security.ccv.provider.v1.KeyMap")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/provider/v1/keymap.proto", fileDescriptor_864a04a770548246)
}

var fileDescriptor_864a04a770548246 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xe3, 0x3f, 0xcd, 0x97, 0x4c, 0xfb, 0x49, 0xc8, 0xea, 0xc2, 0x2a, 0x95, 0x89, 0xcc,
	0xc6, 0x48, 0x74, 0xdc, 0x84, 0x35, 0x0b, 0xda, 0xa5, 0x15, 0xa9, 0xb2, 0xb2, 0x42, 0x48, 0x91,
	0x73, 0x3d, 0xa4, 0x66, 0xb0, 0xef, 0x68, 0x3c, 0x31, 0x98, 0xa7, 0xe0, 0x11, 0x78, 0x9c, 0x2e,
	0xb3, 0x64, 0x85, 0x50, 0xf2, 0x22, 0x68, 0xc6, 0x09, 0x15, 0x12, 0x0b, 0x8b, 0xdd, 0x4c, 0x72,
	0xce, 0xef, 0x9e, 0xb9, 0xd7, 0x97, 0x5c, 0x17, 0x95, 0x62, 0x12, 0xee, 0xb3, 0xa2, 0x5a, 0xd6,
	0x0c, 0x36, 0xb2, 0x50, 0x6d, 0x0c, 0xd0, 0xc4, 0x42, 0x62, 0x53, 0xe4, 0x4c, 0xc6, 0xcd, 0x34,
	0xe6, 0xac, 0x2d, 0x33, 0x41, 0x85, 0x44, 0x85, 0xde, 0xf3, 0xbf, 0x38, 0x28, 0x40, 0x43, 0x8f,
	0x0e, 0xda, 0x4c, 0x2f, 0xce, 0xd7, 0xb8, 0x46, 0xa3, 0x8f, 0xf5, 0xa9, 0xb3, 0x5e, 0x5c, 0x2a,
	0x56, 0xe5, 0x4c, 0x96, 0x45, 0xa5, 0x62, 0x90, 0xad, 0x50, 0xa8, 0xd1, 0x75, 0xf7, 0x6f, 0xf8,
	0xcd, 0x22, 0xee, 0x9c, 0x95, 0xe8, 0xbd, 0x24, 0x36, 0x70, 0xdf, 0x9a, 0x58, 0xd1, 0xe9, 0xec,
	0x92, 0x3e, 0x7a, 0x68, 0xe7, 0xa1, 0x77, 0x9b, 0xd5, 0xc7, 0x02, 0x12, 0xd6, 0xa6, 0x36, 0x70,
	0xad, 0x16, 0xdc, 0xb7, 0xfb, 0xa8, 0x05, 0xf7, 0x9e, 0x10, 0x07, 0x20, 0xf3, 0x9d, 0x89, 0x15,
	0x9d, 0xa5, 0xfa, 0xe8, 0x9d, 0x93, 0x93, 0xa6, 0x86, 0x22, 0xf7, 0xdd, 0x89, 0x15, 0xb9, 0x69,
	0x77, 0xd1, 0xbf, 0x0a, 0xfc, 0xc4, 0xa4, 0x7f, 0x32, 0xb1, 0x22, 0x27, 0xed, 0x2e, 0xe1, 0x07,
	0x32, 0x4a, 0x58, 0xbb, 0xc0, 0x84, 0xb5, 0xde, 0x35, 0x71, 0xdf, 0x4b, 0x2c, 0x7b, 0xe5, 0x34,
	0x4a, 0x9d, 0x54, 0x61, 0xbf, 0xa4, 0x0a, 0xc3, 0x2f, 0x64, 0x6c, 0x6a, 0x99, 0x96, 0x50, 0xe2,
	0x70, 0xd6, 0xf6, 0xaa, 0xa5, 0x85, 0xde, 0x6b, 0xe2, 0x96, 0xac, 0x3c, 0x16, 0x7b, 0x41, 0x7b,
	0xcc, 0x8c, 0xea, 0x42, 0xa9, 0xb1, 0x85, 0xef, 0xc8, 0xff, 0xb7, 0x58, 0xd5, 0x6f, 0xf2, 0x5c,
	0x76, 0x8f, 0x7d, 0x4a, 0xc6, 0x80, 0x55, 0xbd, 0xcc, 0xf2, 0x5c, 0x9a, 0x14, 0x67, 0xe9, 0x08,
	0x0e, 0x8a, 0x63, 0x38, 0xbb, 0x67, 0xb8, 0x70, 0x6b, 0x93, 0x61, 0xc2, 0xda, 0x79, 0x26, 0xbc,
	0x39, 0x19, 0x09, 0xbe, 0x54, 0xb8, 0x34, 0x03, 0x77, 0xa2, 0xd3, 0xd9, 0x55, 0xaf, 0xac, 0xc7,
	0x29, 0xdc, 0xb8, 0x0f, 0x3f, 0x9e, 0x0d, 0xd2, 0xa1, 0xe0, 0x0b, 0xbc, 0xe5, 0x1a, 0x07, 0x06,
	0x67, 0xbe, 0x88, 0x7f, 0xc7, 0x01, 0x5f, 0xe0, 0x1d, 0xf7, 0x52, 0x42, 0x3a, 0x9c, 0xe9, 0xa5,
	0x63, 0x80, 0xb4, 0x3f, 0x50, 0x37, 0xf4, 0x40, 0x1c, 0x69, 0xa2, 0x99, 0xe4, 0x82, 0x8c, 0x01,
	0xb2, 0xc3, 0x93, 0x5d, 0x83, 0x9c, 0xf5, 0x42, 0xfe, 0x31, 0x90, 0x03, 0xf6, 0x3f, 0x80, 0x4c,
	0x3f, 0xfc, 0x26, 0x79, 0xd8, 0x05, 0xd6, 0x76, 0x17, 0x58, 0x3f, 0x77, 0x81, 0xf5, 0x75, 0x1f,
	0x0c, 0xb6, 0xfb, 0x60, 0xf0, 0x7d, 0x1f, 0x0c, 0xde, 0x4e, 0xd7, 0x85, 0xba, 0xdf, 0xac, 0x28,
	0x60, 0x19, 0x03, 0xd6, 0x25, 0xd6, 0xf1, 0x63, 0xb5, 0xab, 0xdf, 0x2b, 0xff, 0xd9, 0x2c, 0xbd,
	0x6a, 0x05, 0xab, 0x57, 0x43, 0xb3, 0x8f, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x4a,
	0x90, 0x01, 0x1c, 0x04, 0x00, 0x00,
}

func (m *Memo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Memo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Memo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintKeymap(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x28
	}
	if m.Vscid != 0 {
		i = encodeVarintKeymap(dAtA, i, uint64(m.Vscid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cca) > 0 {
		i -= len(m.Cca)
		copy(dAtA[i:], m.Cca)
		i = encodeVarintKeymap(dAtA, i, uint64(len(m.Cca)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pk != nil {
		{
			size, err := m.Pk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ck != nil {
		{
			size, err := m.Ck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyToKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyToKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyToKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyToMemo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyToMemo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyToMemo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsAddrToKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsAddrToKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsAddrToKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeymap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintKeymap(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CcaToCk) > 0 {
		for iNdEx := len(m.CcaToCk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CcaToCk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeymap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CkToMemo) > 0 {
		for iNdEx := len(m.CkToMemo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CkToMemo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeymap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CkToPk) > 0 {
		for iNdEx := len(m.CkToPk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CkToPk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeymap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PkToCk) > 0 {
		for iNdEx := len(m.PkToCk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PkToCk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeymap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeymap(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeymap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Memo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ck != nil {
		l = m.Ck.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	l = len(m.Cca)
	if l > 0 {
		n += 1 + l + sovKeymap(uint64(l))
	}
	if m.Vscid != 0 {
		n += 1 + sovKeymap(uint64(m.Vscid))
	}
	if m.Power != 0 {
		n += 1 + sovKeymap(uint64(m.Power))
	}
	return n
}

func (m *KeyToKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	return n
}

func (m *KeyToMemo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	return n
}

func (m *ConsAddrToKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovKeymap(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovKeymap(uint64(l))
	}
	return n
}

func (m *KeyMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PkToCk) > 0 {
		for _, e := range m.PkToCk {
			l = e.Size()
			n += 1 + l + sovKeymap(uint64(l))
		}
	}
	if len(m.CkToPk) > 0 {
		for _, e := range m.CkToPk {
			l = e.Size()
			n += 1 + l + sovKeymap(uint64(l))
		}
	}
	if len(m.CkToMemo) > 0 {
		for _, e := range m.CkToMemo {
			l = e.Size()
			n += 1 + l + sovKeymap(uint64(l))
		}
	}
	if len(m.CcaToCk) > 0 {
		for _, e := range m.CcaToCk {
			l = e.Size()
			n += 1 + l + sovKeymap(uint64(l))
		}
	}
	return n
}

func sovKeymap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeymap(x uint64) (n int) {
	return sovKeymap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Memo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Memo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Memo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ck == nil {
				m.Ck = &crypto.PublicKey{}
			}
			if err := m.Ck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pk == nil {
				m.Pk = &crypto.PublicKey{}
			}
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cca", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cca = append(m.Cca[:0], dAtA[iNdEx:postIndex]...)
			if m.Cca == nil {
				m.Cca = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vscid", wireType)
			}
			m.Vscid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vscid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeymap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeymap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyToKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyToKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyToKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &crypto.PublicKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &crypto.PublicKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeymap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeymap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyToMemo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyToMemo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyToMemo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &crypto.PublicKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeymap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeymap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsAddrToKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsAddrToKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsAddrToKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = append(m.ConsAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsAddr == nil {
				m.ConsAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &crypto.PublicKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeymap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeymap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkToCk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkToCk = append(m.PkToCk, KeyToKey{})
			if err := m.PkToCk[len(m.PkToCk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CkToPk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CkToPk = append(m.CkToPk, KeyToKey{})
			if err := m.CkToPk[len(m.CkToPk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CkToMemo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CkToMemo = append(m.CkToMemo, KeyToMemo{})
			if err := m.CkToMemo[len(m.CkToMemo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcaToCk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeymap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeymap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CcaToCk = append(m.CcaToCk, ConsAddrToKey{})
			if err := m.CcaToCk[len(m.CcaToCk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeymap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeymap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeymap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeymap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeymap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeymap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeymap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeymap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeymap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeymap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeymap = fmt.Errorf("proto: unexpected end of group")
)
