// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/consumer/v1/consumer_query.proto

package core

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NextFeeDistributionEstimate holds information about next fee distribution
type NextFeeDistributionEstimate struct {
	// current block height at the time of querying
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	// block height at which last distribution took place
	LastHeight int64 `protobuf:"varint,2,opt,name=lastHeight,proto3" json:"lastHeight,omitempty"`
	// block height at which next distribution will take place
	NextHeight int64 `protobuf:"varint,3,opt,name=nextHeight,proto3" json:"nextHeight,omitempty"`
	// ratio between consumer and provider fee distribution
	DistributionFraction string `protobuf:"bytes,4,opt,name=distribution_fraction,json=distributionFraction,proto3" json:"distribution_fraction,omitempty"`
	// total accruead fees at the time of querying
	Total string `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`
	// amount distibuted to provider chain
	ToProvider string `protobuf:"bytes,6,opt,name=toProvider,proto3" json:"toProvider,omitempty"`
	// amount distributed (kept) by consumer chain
	ToConsumer string `protobuf:"bytes,7,opt,name=toConsumer,proto3" json:"toConsumer,omitempty"`
}

func (m *NextFeeDistributionEstimate) Reset()         { *m = NextFeeDistributionEstimate{} }
func (m *NextFeeDistributionEstimate) String() string { return proto.CompactTextString(m) }
func (*NextFeeDistributionEstimate) ProtoMessage()    {}
func (*NextFeeDistributionEstimate) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19a2a426798aee, []int{0}
}
func (m *NextFeeDistributionEstimate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextFeeDistributionEstimate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextFeeDistributionEstimate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextFeeDistributionEstimate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextFeeDistributionEstimate.Merge(m, src)
}
func (m *NextFeeDistributionEstimate) XXX_Size() int {
	return m.Size()
}
func (m *NextFeeDistributionEstimate) XXX_DiscardUnknown() {
	xxx_messageInfo_NextFeeDistributionEstimate.DiscardUnknown(m)
}

var xxx_messageInfo_NextFeeDistributionEstimate proto.InternalMessageInfo

func (m *NextFeeDistributionEstimate) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetNextHeight() int64 {
	if m != nil {
		return m.NextHeight
	}
	return 0
}

func (m *NextFeeDistributionEstimate) GetDistributionFraction() string {
	if m != nil {
		return m.DistributionFraction
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetToProvider() string {
	if m != nil {
		return m.ToProvider
	}
	return ""
}

func (m *NextFeeDistributionEstimate) GetToConsumer() string {
	if m != nil {
		return m.ToConsumer
	}
	return ""
}

type QueryNextFeeDistributionEstimateRequest struct {
}

func (m *QueryNextFeeDistributionEstimateRequest) Reset() {
	*m = QueryNextFeeDistributionEstimateRequest{}
}
func (m *QueryNextFeeDistributionEstimateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextFeeDistributionEstimateRequest) ProtoMessage()    {}
func (*QueryNextFeeDistributionEstimateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19a2a426798aee, []int{1}
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.Merge(m, src)
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextFeeDistributionEstimateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextFeeDistributionEstimateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextFeeDistributionEstimateRequest proto.InternalMessageInfo

type QueryNextFeeDistributionEstimateResponse struct {
	Data *NextFeeDistributionEstimate `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryNextFeeDistributionEstimateResponse) Reset() {
	*m = QueryNextFeeDistributionEstimateResponse{}
}
func (m *QueryNextFeeDistributionEstimateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextFeeDistributionEstimateResponse) ProtoMessage()    {}
func (*QueryNextFeeDistributionEstimateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19a2a426798aee, []int{2}
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.Merge(m, src)
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextFeeDistributionEstimateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextFeeDistributionEstimateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextFeeDistributionEstimateResponse proto.InternalMessageInfo

func (m *QueryNextFeeDistributionEstimateResponse) GetData() *NextFeeDistributionEstimate {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19a2a426798aee, []int{3}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params ConsumerParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db19a2a426798aee, []int{4}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() ConsumerParams {
	if m != nil {
		return m.Params
	}
	return ConsumerParams{}
}

func init() {
	proto.RegisterType((*NextFeeDistributionEstimate)(nil), "interchain_security.ccv.consumer.v1.NextFeeDistributionEstimate")
	proto.RegisterType((*QueryNextFeeDistributionEstimateRequest)(nil), "interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateRequest")
	proto.RegisterType((*QueryNextFeeDistributionEstimateResponse)(nil), "interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "interchain_security.ccv.consumer.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "interchain_security.ccv.consumer.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/consumer/v1/consumer_query.proto", fileDescriptor_db19a2a426798aee)
}

var fileDescriptor_db19a2a426798aee = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0xda, 0xae, 0x08, 0x4f, 0xbb, 0x98, 0x22, 0x45, 0x05, 0x85, 0x29, 0x20, 0x51, 0x26,
	0x35, 0x61, 0xed, 0x61, 0xe3, 0x04, 0x1a, 0x63, 0xe2, 0x00, 0x68, 0xab, 0x38, 0x71, 0xa9, 0x5c,
	0xf7, 0x5b, 0x6a, 0xa9, 0xb1, 0x3b, 0xdb, 0x89, 0xb6, 0x1b, 0xe2, 0x07, 0x20, 0x24, 0xfe, 0x09,
	0x7f, 0x80, 0xeb, 0x8e, 0x93, 0xb8, 0x70, 0x42, 0xa8, 0xe5, 0x47, 0x70, 0x44, 0x71, 0x12, 0x96,
	0x4a, 0xb0, 0xa6, 0xd2, 0x6e, 0xee, 0x7b, 0xcf, 0xef, 0x7b, 0x7e, 0x76, 0x83, 0x76, 0x19, 0xd7,
	0x20, 0xe9, 0x98, 0x30, 0x3e, 0x50, 0x40, 0x23, 0xc9, 0xf4, 0x99, 0x4f, 0x69, 0xec, 0x53, 0xc1,
	0x55, 0x14, 0x82, 0xf4, 0xe3, 0xed, 0xbf, 0xeb, 0xc1, 0x49, 0x04, 0xf2, 0xcc, 0x9b, 0x4a, 0xa1,
	0x05, 0xbe, 0xff, 0x8f, 0x9d, 0x1e, 0xa5, 0xb1, 0x97, 0xab, 0xbd, 0x78, 0xbb, 0xd5, 0x0c, 0x44,
	0x20, 0x8c, 0xde, 0x4f, 0x56, 0xe9, 0xd6, 0xd6, 0xdd, 0x40, 0x88, 0x60, 0x02, 0x3e, 0x99, 0x32,
	0x9f, 0x70, 0x2e, 0x34, 0xd1, 0x4c, 0x70, 0x95, 0xb1, 0xdd, 0x55, 0x22, 0xa5, 0x7b, 0xdc, 0x8f,
	0x55, 0x74, 0xe7, 0x0d, 0x9c, 0xea, 0x03, 0x80, 0x7d, 0xa6, 0xb4, 0x64, 0xc3, 0x28, 0xb1, 0x7c,
	0xa1, 0x34, 0x0b, 0x89, 0x06, 0xfc, 0x00, 0x6d, 0xd0, 0x48, 0x4a, 0xe0, 0xfa, 0x25, 0xb0, 0x60,
	0xac, 0x6d, 0x6b, 0xd3, 0x6a, 0xd7, 0xfa, 0x8b, 0x20, 0x76, 0x10, 0x9a, 0x10, 0x95, 0x4b, 0xaa,
	0x46, 0x52, 0x40, 0x12, 0x9e, 0xc3, 0x69, 0xce, 0xd7, 0x52, 0xfe, 0x12, 0xc1, 0x3d, 0x74, 0x7b,
	0x54, 0x98, 0x3e, 0x38, 0x96, 0x84, 0x26, 0x0b, 0xbb, 0xbe, 0x69, 0xb5, 0x6f, 0xf6, 0x9b, 0x45,
	0xf2, 0x20, 0xe3, 0x70, 0x13, 0xad, 0x69, 0xa1, 0xc9, 0xc4, 0x5e, 0x33, 0xa2, 0xf4, 0x47, 0x32,
	0x4a, 0x8b, 0x43, 0x29, 0x62, 0x36, 0x02, 0x69, 0x37, 0x0c, 0x55, 0x40, 0x52, 0xfe, 0x79, 0x56,
	0x82, 0x7d, 0x23, 0xe7, 0x73, 0xc4, 0x7d, 0x84, 0x1e, 0x1e, 0x25, 0x97, 0x75, 0x45, 0x29, 0x7d,
	0x38, 0x89, 0x40, 0x69, 0xf7, 0xbd, 0x85, 0xda, 0xcb, 0xb5, 0x6a, 0x2a, 0xb8, 0x02, 0xfc, 0x16,
	0xd5, 0x47, 0x44, 0x13, 0xd3, 0xdf, 0x7a, 0xf7, 0x99, 0x57, 0xe2, 0x11, 0x78, 0x57, 0xf9, 0x1a,
	0x37, 0xb7, 0x89, 0xb0, 0x49, 0x70, 0x48, 0x24, 0x09, 0x55, 0x1e, 0x6c, 0x8c, 0x6e, 0x2d, 0xa0,
	0x59, 0x84, 0x23, 0xd4, 0x98, 0x1a, 0x24, 0x0b, 0xd1, 0x2b, 0x15, 0x22, 0x6f, 0x26, 0x35, 0xdb,
	0xab, 0x9f, 0xff, 0xb8, 0x57, 0xe9, 0x67, 0x46, 0xdd, 0xaf, 0x35, 0xb4, 0x91, 0x0b, 0xcc, 0x48,
	0xfc, 0xdb, 0x42, 0xf6, 0xff, 0x4a, 0xc1, 0xaf, 0x4a, 0x4d, 0x2c, 0xd9, 0x7f, 0xeb, 0xf5, 0x35,
	0xb9, 0xa5, 0xf5, 0xb8, 0x4f, 0x3f, 0x7c, 0xfb, 0xf5, 0xb9, 0xfa, 0x04, 0xef, 0xf8, 0x4b, 0xff,
	0x47, 0xc9, 0xd3, 0xed, 0x1c, 0x03, 0x74, 0x8a, 0x0f, 0x13, 0x7f, 0xb1, 0xd0, 0x7a, 0xa1, 0x77,
	0xbc, 0x53, 0x3e, 0xdf, 0xc2, 0xfd, 0xb5, 0x76, 0x57, 0xdf, 0x98, 0x9d, 0xe1, 0xb1, 0x39, 0xc3,
	0x16, 0x6e, 0x2f, 0x3f, 0x43, 0x7a, 0x83, 0x7b, 0xfb, 0xe7, 0x33, 0xc7, 0xba, 0x98, 0x39, 0xd6,
	0xcf, 0x99, 0x63, 0x7d, 0x9a, 0x3b, 0x95, 0x8b, 0xb9, 0x53, 0xf9, 0x3e, 0x77, 0x2a, 0xef, 0xb6,
	0x02, 0xa6, 0xc7, 0xd1, 0xd0, 0xa3, 0x22, 0xf4, 0xa9, 0x50, 0xa1, 0x50, 0x05, 0xd3, 0xce, 0xa5,
	0xa9, 0x90, 0x30, 0x6c, 0x98, 0xaf, 0x49, 0xef, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x17,
	0xa1, 0x9d, 0x16, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerQueryClient is the client API for ConsumerQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerQueryClient interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	QueryNextFeeDistribution(ctx context.Context, in *QueryNextFeeDistributionEstimateRequest, opts ...grpc.CallOption) (*QueryNextFeeDistributionEstimateResponse, error)
	// QueryParams queries the ccv/consumer module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type consumerQueryClient struct {
	cc grpc1.ClientConn
}

func NewConsumerQueryClient(cc grpc1.ClientConn) ConsumerQueryClient {
	return &consumerQueryClient{cc}
}

func (c *consumerQueryClient) QueryNextFeeDistribution(ctx context.Context, in *QueryNextFeeDistributionEstimateRequest, opts ...grpc.CallOption) (*QueryNextFeeDistributionEstimateResponse, error) {
	out := new(QueryNextFeeDistributionEstimateResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.consumer.v1.ConsumerQuery/QueryNextFeeDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerQueryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.ccv.consumer.v1.ConsumerQuery/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerQueryServer is the server API for ConsumerQuery service.
type ConsumerQueryServer interface {
	// ConsumerGenesis queries the genesis state needed to start a consumer chain
	// whose proposal has been accepted
	QueryNextFeeDistribution(context.Context, *QueryNextFeeDistributionEstimateRequest) (*QueryNextFeeDistributionEstimateResponse, error)
	// QueryParams queries the ccv/consumer module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedConsumerQueryServer can be embedded to have forward compatible implementations.
type UnimplementedConsumerQueryServer struct {
}

func (*UnimplementedConsumerQueryServer) QueryNextFeeDistribution(ctx context.Context, req *QueryNextFeeDistributionEstimateRequest) (*QueryNextFeeDistributionEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNextFeeDistribution not implemented")
}
func (*UnimplementedConsumerQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}

func RegisterConsumerQueryServer(s grpc1.Server, srv ConsumerQueryServer) {
	s.RegisterService(&_ConsumerQuery_serviceDesc, srv)
}

func _ConsumerQuery_QueryNextFeeDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextFeeDistributionEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerQueryServer).QueryNextFeeDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.consumer.v1.ConsumerQuery/QueryNextFeeDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerQueryServer).QueryNextFeeDistribution(ctx, req.(*QueryNextFeeDistributionEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerQuery_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerQueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.ccv.consumer.v1.ConsumerQuery/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerQueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsumerQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interchain_security.ccv.consumer.v1.ConsumerQuery",
	HandlerType: (*ConsumerQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNextFeeDistribution",
			Handler:    _ConsumerQuery_QueryNextFeeDistribution_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _ConsumerQuery_QueryParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchain_security/ccv/consumer/v1/consumer_query.proto",
}

func (m *NextFeeDistributionEstimate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextFeeDistributionEstimate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextFeeDistributionEstimate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToConsumer) > 0 {
		i -= len(m.ToConsumer)
		copy(dAtA[i:], m.ToConsumer)
		i = encodeVarintConsumerQuery(dAtA, i, uint64(len(m.ToConsumer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToProvider) > 0 {
		i -= len(m.ToProvider)
		copy(dAtA[i:], m.ToProvider)
		i = encodeVarintConsumerQuery(dAtA, i, uint64(len(m.ToProvider)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintConsumerQuery(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DistributionFraction) > 0 {
		i -= len(m.DistributionFraction)
		copy(dAtA[i:], m.DistributionFraction)
		i = encodeVarintConsumerQuery(dAtA, i, uint64(len(m.DistributionFraction)))
		i--
		dAtA[i] = 0x22
	}
	if m.NextHeight != 0 {
		i = encodeVarintConsumerQuery(dAtA, i, uint64(m.NextHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.LastHeight != 0 {
		i = encodeVarintConsumerQuery(dAtA, i, uint64(m.LastHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintConsumerQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextFeeDistributionEstimateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextFeeDistributionEstimateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextFeeDistributionEstimateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextFeeDistributionEstimateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextFeeDistributionEstimateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextFeeDistributionEstimateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsumerQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConsumerQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintConsumerQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsumerQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NextFeeDistributionEstimate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovConsumerQuery(uint64(m.CurrentHeight))
	}
	if m.LastHeight != 0 {
		n += 1 + sovConsumerQuery(uint64(m.LastHeight))
	}
	if m.NextHeight != 0 {
		n += 1 + sovConsumerQuery(uint64(m.NextHeight))
	}
	l = len(m.DistributionFraction)
	if l > 0 {
		n += 1 + l + sovConsumerQuery(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovConsumerQuery(uint64(l))
	}
	l = len(m.ToProvider)
	if l > 0 {
		n += 1 + l + sovConsumerQuery(uint64(l))
	}
	l = len(m.ToConsumer)
	if l > 0 {
		n += 1 + l + sovConsumerQuery(uint64(l))
	}
	return n
}

func (m *QueryNextFeeDistributionEstimateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextFeeDistributionEstimateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovConsumerQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovConsumerQuery(uint64(l))
	return n
}

func sovConsumerQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsumerQuery(x uint64) (n int) {
	return sovConsumerQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextFeeDistributionEstimate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextFeeDistributionEstimate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextFeeDistributionEstimate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeight", wireType)
			}
			m.LastHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHeight", wireType)
			}
			m.NextHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToConsumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextFeeDistributionEstimateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConsumerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextFeeDistributionEstimateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextFeeDistributionEstimateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NextFeeDistributionEstimate{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConsumerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsumerQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsumerQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsumerQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsumerQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsumerQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsumerQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsumerQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsumerQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsumerQuery = fmt.Errorf("proto: unexpected end of group")
)
