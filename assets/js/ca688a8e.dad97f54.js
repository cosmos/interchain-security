"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2543],{5272:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=s(5893),t=s(1151);const o={sidebar_position:23,title:"Fault Resolutions"},a="ADR 022: Fault Resolutions",r={id:"adrs/adr-022-fault-resolutions",title:"Fault Resolutions",description:"Changelog",source:"@site/docs/adrs/adr-022-fault-resolutions.md",sourceDirName:"adrs",slug:"/adrs/adr-022-fault-resolutions",permalink:"/interchain-security/adrs/adr-022-fault-resolutions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23,title:"Fault Resolutions"},sidebar:"tutorialSidebar",previous:{title:"Consumer Chain Clients",permalink:"/interchain-security/adrs/adr-021-consumer-chain-clients"},next:{title:"Frequently Asked Questions",permalink:"/interchain-security/faq"}},l={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Validations",id:"validations",level:3},{value:"States",id:"states",level:3},{value:"Additional considerations",id:"additional-considerations",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"adr-022-fault-resolutions",children:"ADR 022: Fault Resolutions"}),"\n",(0,i.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"17th July 2024: Initial draft"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,i.jsx)(n.p,{children:"Proposed"}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(n.p,{children:["Partial Set Security (",(0,i.jsx)(n.a,{href:"/interchain-security/adrs/adr-015-partial-set-security",children:"PSS"}),") allows a subset of a provider chain's validator set to secure a consumer chain.\nWhile this shared security scheme has many advantages, it comes with a risk known as the\n",(0,i.jsx)(n.a,{href:"https://informal.systems/blog/replicated-vs-mesh-security#risks-of-opt-in-security-also-known-as-ics-v-2",children:"subset problem"}),".\nThis problem arises when a malicious majority of validators from the provider chain collude and misbehave on a consumer chain.\nThis threat is particularly relevant for Opt-in chains, since they might be secured by a relatively small subset of the provider's validator set."]}),"\n",(0,i.jsx)(n.p,{children:"In cases of collusion, various types of misbehaviour can be performed by the validators, such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Incorrect executions to break protocol rules in order to steal funds."}),"\n",(0,i.jsx)(n.li,{children:"Liveness attacks to halt the chain or censor transactions."}),"\n",(0,i.jsx)(n.li,{children:"Oracle attacks to falsify information used by the chain logic."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Currently, these types of attacks aren't handled in PSS, leaving the malicious validators unpunished."}),"\n",(0,i.jsx)(n.p,{children:"A potential solution for the handling of incorrect executions is to use fraud proofs.\nThis technology allows proving incorrect state transitions of a chain without a full node.\nHowever, this is a complex technology and there is no framework that works for Cosmos chains to this day."}),"\n",(0,i.jsx)(n.p,{children:"To address this risk in PSS, a governance-gated slashing solution can be used to handle all types of misbehavior resulting from validator collusion. As fraud proof technology matures, part of the solution could potentially be automated."}),"\n",(0,i.jsxs)(n.p,{children:["This ADR proposes a fault resolution mechanism, which is a type of governance proposal that can be used to vote on the slashing of validators that misbehave on Opt-in consumer chains (see ",(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/preventing-intersubjective-faults-in-ics/14103#fault-resolutions-3",children:"fault resolutions"}),' in "Preventing Intersubjective faults in ICS").']}),"\n",(0,i.jsxs)(n.p,{children:["In what follows, we describe the implementation of a fault resolution mechanism for any intersubjective fault.\nNote that in the first iteration, it is only incorrect executions that are defined as a fault and are therefore dealt with by the mechanism (see ",(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/preventing-intersubjective-faults-in-ics/14103#incorrect-execution-fault-definition-5",children:"Incorrect Executions"}),' in "Preventing Intersubjective faults in ICS").']}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["The proposed solution introduces a new ",(0,i.jsx)(n.code,{children:"consumer-fault-resolution"})," governance proposal type to the ",(0,i.jsx)(n.code,{children:"provider"})," module, which allows validators to be penalised for committing faults on an Opt-in consumer chain."]}),"\n",(0,i.jsx)(n.p,{children:"If such a proposal passes, the proposal handler tombstones all the validators listed in the proposal and slashes them by a per-consumer chain predefined\namount or the default value used for double-sign infractions."}),"\n",(0,i.jsx)(n.p,{children:"The proposal has the following fields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer Chain"}),": The consumer chain ID that the fault was related to."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validators"}),": The list of all the validators to be slashed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Evidence"}),": A free text form."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault Type"}),": The fault definition type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": This field is automatically generated by aggregating the fault definition corresponding to the ",(0,i.jsx)(n.em,{children:"Fault Type"})," and the ",(0,i.jsx)(n.em,{children:"Evidence"})," fields."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Each fault type is mapped to a fault definition that precisely describes an intersubjective fault, such as an incorrect execution, and explains why it qualifies as a slashable fault. Refer to the ",(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/preventing-intersubjective-faults-in-ics/14103#fault-definitions-4",children:"fault definitions section"}),' in "Preventing Intersubjective faults in ICS" for more details. Note that the text of each fault definition is stored as a string constant in the provider code.']}),"\n",(0,i.jsxs)(n.p,{children:["In addition, to prevent spamming, users must pay a default fee of ",(0,i.jsx)(n.code,{children:"100ATOM"})," to submit a fault resolution to the provider.\nThis amount is stored in a new ",(0,i.jsx)(n.code,{children:"consumer-fault-resolution-fee"})," parameter of the ",(0,i.jsx)(n.code,{children:"provider"})," module."]}),"\n",(0,i.jsx)(n.h3,{id:"validations",children:"Validations"}),"\n",(0,i.jsx)(n.p,{children:"The submission of a fault resolution succeeds only if all of the following conditions are met:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the consumer chain is an Opt-in chain"}),"\n",(0,i.jsx)(n.li,{children:"all listed validators were opted-in to the consumer chain in the past unbonding-period"}),"\n",(0,i.jsxs)(n.li,{children:["the ",(0,i.jsx)(n.code,{children:"100ATOM"})," fee is provided"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"states",children:"States"}),"\n",(0,i.jsxs)(n.p,{children:["Additional states are added to the ",(0,i.jsx)(n.code,{children:"provider"})," modules:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The timestamps that record when validators opts in or opts out of a Opt-in consumer chain.\nNote that these timestamps can be pruned after an unbonding period elapses following a validator's opts-out."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:"    ConsumerValidatorSubscriptionTimestampPrefix | len(consumerID) | consumerID | valAddr | ProtocolBuffer(ConsumerValSubscriptionTimestamp)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"    message {\n        // timestamp recording the last time a validator opted in to the consumer chain\n        google.protobuf.Timestamp join_time = 1;\n        // timestamp recording the last time a validator opted out of the consumer chain\n        google.protobuf.Timestamp leave_time = 2;\n    }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pre-defined slashing factor per-consumer chain for each defined fault (optional)."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:"    ConsumerFaultSlashFactorPrefix | len(consumerID) | consumerID | faultType -> SlashFactor\n"})}),"\n",(0,i.jsx)(n.h3,{id:"additional-considerations",children:"Additional considerations"}),"\n",(0,i.jsxs)(n.p,{children:["Fault resolution proposals should be ",(0,i.jsx)(n.code,{children:"expedited"})," to minimize the time given to the listed validators\nto unbond to avoid punishment (see ",(0,i.jsx)(n.a,{href:"https://docs.cosmos.network/v0.50/build/modules/gov#expedited-proposals",children:"Expedited Proposals"}),") ."]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provide the ability to slash and tombstone validators for committing incorrect executions on Opt-in consumer chains."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Assuming that malicious validators unbond immediately after misbehaving, a fault resolution has to be submitted within a maximum\nof two weeks in order to slash the validators."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fault definitions need to have a clear framework in order to avoid debates about whether an attack has actually taken place."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/preventing-intersubjective-faults-in-ics/14103",children:"Preventing intersubjective faults in ICS"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/enabling-opt-in-and-mesh-security-with-fraud-votes/10901",children:"Enabling Opt-in and Mesh Security with Fraud Votes"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://forum.cosmos.network/t/chips-discussion-phase-partial-set-security-updated/11775",children:"CHIPs discussion phase: Partial Set Security"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://informal.systems/blog/replicated-vs-mesh-security#risks-of-opt-in-security-also-known-as-ics-v-2",children:"Replicated vs. Mesh Security"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>a});var i=s(7294);const t={},o=i.createContext(t);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);