"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4074],{5976:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(5893),o=n(1151);const s={sidebar_position:5},r="Democracy modules",i={id:"features/democracy-modules",title:"Democracy modules",description:"This section is relevant for chains transitioning from a standalone chain and new consumer chains that require some functionality from the x/staking module.",source:"@site/versioned_docs/version-v5.2.0/features/democracy-modules.md",sourceDirName:"features",slug:"/features/democracy-modules",permalink:"/interchain-security/v5.2.0/features/democracy-modules",draft:!1,unlisted:!1,tags:[],version:"v5.2.0",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Consumer Initiated Slashing",permalink:"/interchain-security/v5.2.0/features/slashing"},next:{title:"Partial Set Security",permalink:"/interchain-security/v5.2.0/features/partial-set-security"}},c={},p=[{value:"Staking",id:"staking",level:2},{value:"Implications for consumer chains",id:"implications-for-consumer-chains",level:3},{value:"Governators (aka. Governors)",id:"governators-aka-governors",level:4},{value:"Tokenomics",id:"tokenomics",level:4},{value:"Integration",id:"integration",level:3},{value:"1. confirm that no modules are returning validator updates",id:"1-confirm-that-no-modules-are-returning-validator-updates",level:4},{value:"2. wire the module in app.go",id:"2-wire-the-module-in-appgo",level:4},{value:"Governance",id:"governance",level:2},{value:"Integration",id:"integration-1",level:3},{value:"Distribution",id:"distribution",level:2},{value:"How it works",id:"how-it-works",level:3},{value:"Integration",id:"integration-2",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"democracy-modules",children:"Democracy modules"}),"\n",(0,a.jsxs)(t.p,{children:["This section is relevant for chains transitioning from a standalone chain and new consumer chains that require some functionality from the ",(0,a.jsx)(t.code,{children:"x/staking"})," module."]}),"\n",(0,a.jsxs)(t.p,{children:["The democracy modules comprise ",(0,a.jsx)(t.code,{children:"x/staking"}),", ",(0,a.jsx)(t.code,{children:"x/distribution"})," and ",(0,a.jsx)(t.code,{children:"x/governance"})," with overrides and extensions required for normal operation when participating in interchain security."]}),"\n",(0,a.jsx)(t.p,{children:"The modules are plug-and-play and only require small wiring changes to be enabled."}),"\n",(0,a.jsxs)(t.p,{children:["For a full integration check the ",(0,a.jsx)(t.code,{children:"consumer-democracy"})," ",(0,a.jsx)(t.a,{href:"https://github.com/cosmos/interchain-security/blob/main/app/consumer-democracy/app.go",children:"example app"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"staking",children:"Staking"}),"\n",(0,a.jsxs)(t.p,{children:["The democracy staking module allows the cosmos-sdk ",(0,a.jsx)(t.code,{children:"x/staking"})," module to be used alongside the interchain security ",(0,a.jsx)(t.code,{children:"consumer"})," module."]}),"\n",(0,a.jsxs)(t.p,{children:["The module uses overrides that allow the full ",(0,a.jsx)(t.code,{children:"x/staking"})," functionality with one notable difference - the staking module will no longer be used to provide the consensus validator set."]}),"\n",(0,a.jsx)(t.h3,{id:"implications-for-consumer-chains",children:"Implications for consumer chains"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"x/ccv/democracy/staking"})," allows consumer chains to separate governance from block production."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"The validator set coming from the provider chain does not need to participate in governance - they only provide infrastructure (create blocks and maintain consensus)."})}),"\n",(0,a.jsx)(t.h4,{id:"governators-aka-governors",children:"Governators (aka. Governors)"}),"\n",(0,a.jsxs)(t.p,{children:["Validators registered with the ",(0,a.jsx)(t.code,{children:"x/staking"}),' module become "Governators".']}),"\n",(0,a.jsx)(t.p,{children:"Unlike Validators, Governators are not required to run any chain infastructure since they are not signing any blocks."}),"\n",(0,a.jsx)(t.p,{children:"However, Governators retain a subset of the validator properties:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["new Governators can be created (via ",(0,a.jsx)(t.code,{children:"MsgCreateValidator"}),")"]}),"\n",(0,a.jsx)(t.li,{children:"Governators can accept delegations"}),"\n",(0,a.jsx)(t.li,{children:"Governators can vote on governance proposals (with their self stake and delegations)"}),"\n",(0,a.jsx)(t.li,{children:"Governators earn token rewards"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"With these changes, Governators can become community advocates that can specialize in chain governance and they get rewarded for their participation the same way the validators do."}),"\n",(0,a.jsx)(t.p,{children:"Additionally, Governators can choose to provide additional infrastructure such as RPC/API access points, archive nodes, indexers and similar software."}),"\n",(0,a.jsx)(t.h4,{id:"tokenomics",children:"Tokenomics"}),"\n",(0,a.jsx)(t.p,{children:"The consumer chain's token will remain a governance and reward token. The token's parameters (inflation, max supply, burn rate) are not affected."}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"Staking rewards are distributed to all Governators and their delegators after distributing the rewards to the provider chain's validator set."})}),"\n",(0,a.jsx)(t.h3,{id:"integration",children:"Integration"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"x/ccv/democracy/staking"})," module provides these ",(0,a.jsx)(t.code,{children:"x/staking"})," overrides:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-golang",children:"\n// InitGenesis delegates the InitGenesis call to the underlying x/staking module,\n// however, it returns no validator updates as validators are tracked via the\n// consumer chain's x/cvv/consumer module and so this module is not responsible for returning the initial validator set.\nfunc (am AppModule) InitGenesis(ctx sdk.Context, cdc codec.JSONCodec, data json.RawMessage) []abci.ValidatorUpdate {\n\tvar genesisState types.GenesisState\n\n\tcdc.MustUnmarshalJSON(data, &genesisState)\n\t_ = am.keeper.InitGenesis(ctx, &genesisState)  // run staking InitGenesis\n\n\treturn []abci.ValidatorUpdate{}  // do not return validator updates\n}\n\n// EndBlock delegates the EndBlock call to the underlying x/staking module.\n// However, no validator updates are returned as validators are tracked via the\n// consumer chain's x/cvv/consumer module.\nfunc (am AppModule) EndBlock(ctx sdk.Context, _ abci.RequestEndBlock) []abci.ValidatorUpdate {\n\t_ = am.keeper.BlockValidatorUpdates(ctx)  // perform staking BlockValidatorUpdates\n\treturn []abci.ValidatorUpdate{}  // do not return validator updates\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To integrate the ",(0,a.jsx)(t.code,{children:"democracy/staking"})," follow this guide:"]}),"\n",(0,a.jsx)(t.h4,{id:"1-confirm-that-no-modules-are-returning-validator-updates",children:"1. confirm that no modules are returning validator updates"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["Only the ",(0,a.jsx)(t.code,{children:"x/ccv/consumer"})," module should be returning validator updates."]})}),"\n",(0,a.jsx)(t.p,{children:"If some of your modules are returning validator updates please disable them while maintaining your business logic:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-diff",children:"func (am AppModule) InitGenesis(ctx sdk.Context, cdc codec.JSONCodec, data json.RawMessage) []abci.ValidatorUpdate {\n\tvar genesisState types.GenesisState\n\n\tcdc.MustUnmarshalJSON(data, &genesisState)\n-\treturn am.keeper.InitGenesis(ctx, &genesisState)\n+ \t_ = am.keeper.InitGenesis(ctx, &genesisState)  // run InitGenesis but drop the result\n+\treturn []abci.ValidatorUpdate{}  // return empty validator updates\n}\n\n\nfunc (am AppModule) EndBlock(ctx sdk.Context, _ abci.RequestEndBlock) []abci.ValidatorUpdate {\n-\treturn am.keeper.BlockValidatorUpdates(ctx)\n+ \t_ = am.keeper.BlockValidatorUpdates(ctx)  // perform staking BlockValidatorUpdates\n+\treturn []abci.ValidatorUpdate{}  // return empty validator updates\n}\n"})}),"\n",(0,a.jsx)(t.h4,{id:"2-wire-the-module-in-appgo",children:"2. wire the module in app.go"}),"\n",(0,a.jsxs)(t.p,{children:["You ",(0,a.jsx)(t.strong,{children:"do not need to remove"})," the cosmos-sdk ",(0,a.jsx)(t.code,{children:"StakingKeeper"})," from your wiring."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-diff",children:'import (\n    ...\n+   ccvstaking "github.com/cosmos/interchain-security/v4/x/ccv/democracy/staking"\n)\n\nvar (\n    // replace the staking.AppModuleBasic\n\tModuleBasics = module.NewBasicManager(\n\t\tauth.AppModuleBasic{},\n\t\tgenutil.NewAppModuleBasic(genutiltypes.DefaultMessageValidator),\n\t\tbank.AppModuleBasic{},\n\t\tcapability.AppModuleBasic{},\n-\t\tsdkstaking.AppModuleBasic{},\n+\t\tccvstaking.AppModuleBasic{},  // replace sdkstaking\n        ...\n    )\n)\n\n\nfunc NewApp(...) {\n    ...\n\n\t// use sdk StakingKeepeer\n\tapp.StakingKeeper = stakingkeeper.NewKeeper(\n\t\tappCodec,\n\t\tkeys[stakingtypes.StoreKey],\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n\tapp.MintKeeper = mintkeeper.NewKeeper(\n\t\tappCodec,\n\t\tkeys[minttypes.StoreKey],\n\t\tapp.StakingKeeper,\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tauthtypes.FeeCollectorName,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n\t// no changes required for the distribution keeper\n    app.DistrKeeper = distrkeeper.NewKeeper(\n\t\tappCodec,\n\t\tkeys[distrtypes.StoreKey],\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tapp.StakingKeeper,  // keep StakingKeeper!\n\t\tauthtypes.FeeCollectorName,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n+   // pre-initialize ConsumerKeeper to satsfy ibckeeper.NewKeeper\n+\tapp.ConsumerKeeper = consumerkeeper.NewNonZeroKeeper(\n+\t\tappCodec,\n+\t\tkeys[consumertypes.StoreKey],\n+\t\tapp.GetSubspace(consumertypes.ModuleName),\n+\t)\n+\n+\tapp.IBCKeeper = ibckeeper.NewKeeper(\n+\t\tappCodec,\n+\t\tkeys[ibchost.StoreKey],\n+\t\tapp.GetSubspace(ibchost.ModuleName),\n+\t\t&app.ConsumerKeeper,\n+\t\tapp.UpgradeKeeper,\n+\t\tscopedIBCKeeper,\n+\t)\n+\n+\t// Create CCV consumer and modules\n+\tapp.ConsumerKeeper = consumerkeeper.NewKeeper(\n+\t\tappCodec,\n+\t\tkeys[consumertypes.StoreKey],\n+\t\tapp.GetSubspace(consumertypes.ModuleName),\n+\t\tscopedIBCConsumerKeeper,\n+\t\tapp.IBCKeeper.ChannelKeeper,\n+\t\t&app.IBCKeeper.PortKeeper,\n+\t\tapp.IBCKeeper.ConnectionKeeper,\n+\t\tapp.IBCKeeper.ClientKeeper,\n+\t\tapp.SlashingKeeper,\n+\t\tapp.BankKeeper,\n+\t\tapp.AccountKeeper,\n+\t\t&app.TransferKeeper,\n+\t\tapp.IBCKeeper,\n+\t\tauthtypes.FeeCollectorName,\n+\t)\n+\n+\t// Setting the standalone staking keeper is only needed for standalone to consumer changeover chains\n+  \t// New chains using the democracy/staking do not need to set this\n+\tapp.ConsumerKeeper.SetStandaloneStakingKeeper(app.StakingKeeper)\n\n\n\n\t// change the slashing keeper dependency\n\tapp.SlashingKeeper = slashingkeeper.NewKeeper(\n\t\tappCodec,\n\t\tlegacyAmino,\n\t\tkeys[slashingtypes.StoreKey],\n-\t\tapp.StakingKeeper,\n+\t\t&app.ConsumerKeeper,  // ConsumerKeeper implements StakingKeeper interface\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n\t// register slashing module StakingHooks to the consumer keeper\n+\tapp.ConsumerKeeper = *app.ConsumerKeeper.SetHooks(app.SlashingKeeper.Hooks())\n+\tconsumerModule := consumer.NewAppModule(app.ConsumerKeeper, app.GetSubspace(consumertypes.ModuleName))\n\n\t    // register the module with module manager\n    // replace the x/staking module\n\tapp.MM = module.NewManager(\n\t\t...\n-\t\tsdkstaking.NewAppModule(appCodec, &app.StakingKeeper, app.AccountKeeper, app.BankKeeper, app.GetSubspace(stakingtypes.ModuleName)),\n+\t\tccvstaking.NewAppModule(appCodec, *app.StakingKeeper, app.AccountKeeper, app.BankKeeper, app.GetSubspace(stakingtypes.ModuleName)),\n\t\t...\n\t)\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"governance",children:"Governance"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"x/ccv/democracy/governance"})," module extends the ",(0,a.jsx)(t.code,{children:"x/governance"})," module with the functionality to filter proposals."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:"Consumer chains can limit in the types of governance proposals that can be executed on chain to avoid inadvertent changes to interchain security protocol that could affect security properties."})}),"\n",(0,a.jsxs)(t.p,{children:["The module uses ",(0,a.jsx)(t.code,{children:"AnteHandler"})," to limit the types of proposals that can be executed."]}),"\n",(0,a.jsx)(t.h3,{id:"integration-1",children:"Integration"}),"\n",(0,a.jsxs)(t.p,{children:["Add new ",(0,a.jsx)(t.code,{children:"AnteHandler"})," to your ",(0,a.jsx)(t.code,{children:"app"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'\n// app/ante/forbidden_proposals.go\npackage ante\n\nimport (\n\t"fmt"\n\n\tsdk "github.com/cosmos/cosmos-sdk/types"\n\tgovv1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"\n\tgovv1beta1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1beta1"\n\tibctransfertypes "github.com/cosmos/ibc-go/v7/modules/apps/transfer/types"\n\n\t"github.com/cosmos/cosmos-sdk/x/gov/types/v1beta1"\n\t"github.com/cosmos/cosmos-sdk/x/params/types/proposal"\n)\n\ntype ForbiddenProposalsDecorator struct {\n\tisLegacyProposalWhitelisted func(govv1beta1.Content) bool\n\tisModuleWhiteList           func(string) bool\n}\n\nfunc NewForbiddenProposalsDecorator(\n\twhiteListFn func(govv1beta1.Content) bool,\n\tisModuleWhiteList func(string) bool,\n) ForbiddenProposalsDecorator {\n\treturn ForbiddenProposalsDecorator{\n\t\tisLegacyProposalWhitelisted: whiteListFn,\n\t\tisModuleWhiteList:           isModuleWhiteList,\n\t}\n}\n\nfunc (decorator ForbiddenProposalsDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (newCtx sdk.Context, err error) {\n\tcurrHeight := ctx.BlockHeight()\n\n\tfor _, msg := range tx.GetMsgs() {\n\t\t// if the message is MsgSubmitProposal, check if proposal is whitelisted\n\t\tsubmitProposalMgs, ok := msg.(*govv1.MsgSubmitProposal)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tmessages := submitProposalMgs.GetMessages()\n\t\tfor _, message := range messages {\n\t\t\tif sdkMsg, isLegacyProposal := message.GetCachedValue().(*govv1.MsgExecLegacyContent); isLegacyProposal {\n\t\t\t\t// legacy gov proposal content\n\t\t\t\tcontent, err := govv1.LegacyContentFromMessage(sdkMsg)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn ctx, fmt.Errorf("tx contains invalid LegacyContent")\n\t\t\t\t}\n\t\t\t\tif !decorator.isLegacyProposalWhitelisted(content) {\n\t\t\t\t\treturn ctx, fmt.Errorf("tx contains unsupported proposal message types at height %d", currHeight)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// not legacy gov proposal content and not whitelisted\n\t\t\tif !decorator.isModuleWhiteList(message.TypeUrl) {\n\t\t\t\treturn ctx, fmt.Errorf("tx contains unsupported proposal message types at height %d", currHeight)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn next(ctx, tx, simulate)\n}\n\nfunc IsProposalWhitelisted(content v1beta1.Content) bool {\n\tswitch c := content.(type) {\n\tcase *proposal.ParameterChangeProposal:\n\t\treturn isLegacyParamChangeWhitelisted(c.Changes)\n\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc isLegacyParamChangeWhitelisted(paramChanges []proposal.ParamChange) bool {\n\tfor _, paramChange := range paramChanges {\n\t\t_, found := LegacyWhitelistedParams[legacyParamChangeKey{Subspace: paramChange.Subspace, Key: paramChange.Key}]\n\t\tif !found {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\ntype legacyParamChangeKey struct {\n\tSubspace, Key string\n}\n\n// Legacy params can be whitelisted\nvar LegacyWhitelistedParams = map[legacyParamChangeKey]struct{}{\n\t{Subspace: ibctransfertypes.ModuleName, Key: "SendEnabled"}:    {},\n\t{Subspace: ibctransfertypes.ModuleName, Key: "ReceiveEnabled"}: {},\n}\n\n// New proposal types can be whitelisted\nvar WhiteListModule = map[string]struct{}{\n\t"/cosmos.gov.v1.MsgUpdateParams":               {},\n\t"/cosmos.bank.v1beta1.MsgUpdateParams":         {},\n\t"/cosmos.staking.v1beta1.MsgUpdateParams":      {},\n\t"/cosmos.distribution.v1beta1.MsgUpdateParams": {},\n\t"/cosmos.mint.v1beta1.MsgUpdateParams":         {},\n}\n\nfunc IsModuleWhiteList(typeUrl string) bool {\n\t_, found := WhiteListModule[typeUrl]\n\treturn found\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Add the ",(0,a.jsx)(t.code,{children:"AnteHandler"})," to the list of supported antehandlers:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-diff",children:'// app/ante_handler.go\npackage app\n\nimport (\n\t...\n\n+\tdemocracyante "github.com/cosmos/interchain-security/v4/app/consumer-democracy/ante"\n+\tconsumerante "github.com/cosmos/interchain-security/v4/app/consumer/ante"\n+\ticsconsumerkeeper "github.com/cosmos/interchain-security/v4/x/ccv/consumer/keeper"\n)\n\ntype HandlerOptions struct {\n\tante.HandlerOptions\n\n\tIBCKeeper      *ibckeeper.Keeper\n+\tConsumerKeeper ibcconsumerkeeper.Keeper\n}\n\nfunc NewAnteHandler(options HandlerOptions) (sdk.AnteHandler, error) {\n\t....\n\n\tanteDecorators := []sdk.AnteDecorator{\n        ...\n+\t\tconsumerante.NewMsgFilterDecorator(options.ConsumerKeeper),\n+\t\tconsumerante.NewDisabledModulesDecorator("/cosmos.evidence", "/cosmos.slashing"),\n+\t\tdemocracyante.NewForbiddenProposalsDecorator(IsProposalWhitelisted, IsModuleWhiteList),\n\t\t...\n\t}\n\n\treturn sdk.ChainAnteDecorators(anteDecorators...), nil\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Wire the module in ",(0,a.jsx)(t.code,{children:"app.go"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-diff",children:'// app/app.go\npackage app\nimport (\n    ...\n    sdkgov "github.com/cosmos/cosmos-sdk/x/gov"\n\tgovkeeper "github.com/cosmos/cosmos-sdk/x/gov/keeper"\n\tgovtypes "github.com/cosmos/cosmos-sdk/x/gov/types"\n\tgovv1beta1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1beta1"\n\n+\tccvgov "github.com/cosmos/interchain-security/v4/x/ccv/democracy/governance"\n)\n\nvar (\n\n    // use sdk governance module\n\tModuleBasics = module.NewBasicManager(\n\t\t...\n\t\tsdkgov.NewAppModuleBasic(\n\t\t\t[]govclient.ProposalHandler{\n\t\t\t\tparamsclient.ProposalHandler,\n\t\t\t\tupgradeclient.LegacyProposalHandler,\n\t\t\t\tupgradeclient.LegacyCancelProposalHandler,\n\t\t\t},\n\t\t),\n    )\n)\n\nfunc NewApp(...) {\n    // retain sdk gov router and keeper registrations\n\tsdkgovRouter := govv1beta1.NewRouter()\n\tsdkgovRouter.\n\t\tAddRoute(govtypes.RouterKey, govv1beta1.ProposalHandler).\n\t\tAddRoute(paramproposal.RouterKey, params.NewParamChangeProposalHandler(app.ParamsKeeper)).\n\t\tAddRoute(upgradetypes.RouterKey, upgrade.NewSoftwareUpgradeProposalHandler(&app.UpgradeKeeper))\n\tgovConfig := govtypes.DefaultConfig()\n\n\tapp.GovKeeper = *govkeeper.NewKeeper(\n\t\tappCodec,\n\t\tkeys[govtypes.StoreKey],\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tapp.StakingKeeper,\n\t\tapp.MsgServiceRouter(),\n\t\tgovConfig,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n\tapp.GovKeeper.SetLegacyRouter(sdkgovRouter)\n\n\n    // register the module with module manager\n    // replace the x/gov module\n\tapp.MM = module.NewManager(\n-\t\tsdkgov.NewAppModule(appCodec, app.GovKeeper, app.AccountKeeper, app.BankKeeper, IsProposalWhitelisted, app.GetSubspace(govtypes.ModuleName), IsModuleWhiteList),\n+\t\tccvgov.NewAppModule(appCodec, app.GovKeeper, app.AccountKeeper, app.BankKeeper, IsProposalWhitelisted, app.GetSubspace(govtypes.ModuleName), IsModuleWhiteList),\n\t\t...\n    )\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"distribution",children:"Distribution"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"democracy/distribution"})," module allows the consumer chain to send rewards to the provider chain while retaining the ",(0,a.jsx)(t.code,{children:"x/distribution"})," module for internal reward distribution to Governators and stakers."]})}),"\n",(0,a.jsx)(t.h3,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsx)(t.p,{children:"First, a % of rewards to be distributed to the provider chain's validator set is calculated and sent to the provider chain. Only opted-in validators from the provider chain will receive the consumer rewards."}),"\n",(0,a.jsx)(t.p,{children:"Second, the remaining rewards get distributed to the consumer chain's Governators and their delegators."}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["The % that is sent to the provider chain corresponds to ",(0,a.jsx)(t.code,{children:"1 - ConsumerRedistributionFraction"}),"."]}),(0,a.jsxs)(t.p,{children:["e.g. ",(0,a.jsx)(t.code,{children:'ConsumerRedistributionFraction = "0.75"'})]}),(0,a.jsx)(t.p,{children:"means that the consumer chain retains 75% of the rewards, while 25% gets sent to the provider chain to be distributed as rewards to provider chain validators."})]}),"\n",(0,a.jsx)(t.h3,{id:"integration-2",children:"Integration"}),"\n",(0,a.jsxs)(t.p,{children:["Change the wiring in ",(0,a.jsx)(t.code,{children:"app.go"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-diff",children:'import (\n    ...\n    distrkeeper "github.com/cosmos/cosmos-sdk/x/distribution/keeper"\n\tdistrtypes "github.com/cosmos/cosmos-sdk/x/distribution/types"\n    sdkdistr "github.com/cosmos/cosmos-sdk/x/distribution"\n\n+   ccvdistr "github.com/cosmos/interchain-security/v4/x/ccv/democracy/distribution"\n)\n\nvar (\n    // replace sdk distribution AppModuleBasic\n\tModuleBasics = module.NewBasicManager(\n\t\tauth.AppModuleBasic{},\n\t\tgenutil.NewAppModuleBasic(genutiltypes.DefaultMessageValidator),\n\t\tbank.AppModuleBasic{},\n\t\tcapability.AppModuleBasic{},\n\t\tccvstaking.AppModuleBasic{}, // make sure you first swap the staking keeper\n\t\tmint.AppModuleBasic{},\n-\t\tsdkdistr.AppModuleBasic{},\n+\t\tccvdistr.AppModuleBasic{},\n    )\n)\n\nfunc NewApp(...) {\n    ....\n\n\tapp.DistrKeeper = distrkeeper.NewKeeper(\n\t\tappCodec,\n\t\tkeys[distrtypes.StoreKey],\n\t\tapp.AccountKeeper,\n\t\tapp.BankKeeper,\n\t\tapp.StakingKeeper,  // connect to sdk StakingKeeper\n\t\tconsumertypes.ConsumerRedistributeName,\n\t\tauthtypes.NewModuleAddress(govtypes.ModuleName).String(),\n\t)\n\n    // register with the module manager\n\tapp.MM = module.NewManager(\n\t\t...\n-\t\tsdkdistr.NewAppModule(appCodec, app.DistrKeeper, app.AccountKeeper, app.BankKeeper, *app.StakingKeeper, authtypes.FeeCollectorName,     app.GetSubspace(distrtypes.ModuleName)),\n\n+\t\tccvdistr.NewAppModule(appCodec, app.DistrKeeper, app.AccountKeeper, app.BankKeeper, *app.StakingKeeper, authtypes.FeeCollectorName, app.GetSubspace(distrtypes.ModuleName)),\n\t\tccvstaking.NewAppModule(appCodec, *app.StakingKeeper, app.AccountKeeper, app.BankKeeper, app.GetSubspace(stakingtypes.ModuleName)),\n\t\t...\n    )\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>r});var a=n(7294);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);